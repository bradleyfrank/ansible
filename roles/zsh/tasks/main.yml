---

- name: "Install zsh"
  ansible.builtin.package:
    name: "{{ zsh_package_name }}"
  become: "{{ true if ansible_facts['system'] == 'Linux' else false }}"
  tags: [zsh, install, become]

- name: "Get current Zsh version"
  ansible.builtin.command:
    cmd: "{{ zsh_bin[ansible_facts['system']] }} --version"
  register: cmd_zsh_version
  changed_when: false
  tags: [zsh, dotfiles]

- name: "Set current Zsh version"
  ansible.builtin.set_fact:
    zsh_current_version: "{{ (cmd_zsh_version['stdout'] | split)[1] }}"
  tags: [zsh, dotfiles]

- name: "Ensure supplemental Zsh directories exist"
  ansible.builtin.file:
    path: "{{ item }}"
    state: "directory"
    mode: "0744"
  loop: "{{ zsh_supplemental_dirs }}"
  tags: [zsh, zsh_dirs, dotfiles]

- name: "Configure Homebrew Zsh for MacOS"
  when: (ansible_facts['system'] == "Darwin") and (zsh_prefer_homebrew)
  become: true
  tags: [zsh, shell, become]
  block:
    - name: "Add Homebrew Zsh to available shells"
      ansible.builtin.lineinfile:
        path: "/etc/shells"
        line: "{{ global_homebrew_prefix }}/bin/zsh"
    - name: "Fix Homebrew Zsh folder permissions"
      ansible.builtin.file:
        path: "{{ item }}"
        mode: "0755"
      loop: "{{ zsh_chmod_directories }}"

- name: "Set Zsh as default shell"
  ansible.builtin.user:
    name: "{{ ansible_facts['user_id'] }}"
    shell: "{{ zsh_bin[ansible_facts['system']] }}"
  when: ansible_facts['user_shell'] != zsh_bin[ansible_facts['system']]
  become: true
  tags: [zsh, shell, become]

- name: "Install Zsh plugins"
  ansible.builtin.git:
    repo: "{{ item['repo'] }}"
    dest: "{{ zsh_plugins_dir }}/{{ item['name'] }}"
    depth: 1
    version: "{{ item['version'] | default(omit) }}"
  loop: "{{ zsh_plugins }}"
  loop_control:
    label: "{{ item['name'] }}"
  tags: [zsh, zsh_plugins, dotfiles]

- name: "Generate Zsh completions"
  ansible.builtin.shell:
    cmd: "{{ item['command'] }} > {{ zsh_functions_dir }}/_{{ item['name'] }}"
  changed_when: false
  loop: "{{ zsh_completions }}"
  loop_control:
    label: "{{ item['name'] }}"
  tags: [zsh, completions, dotfiles]

- name: "Apply zshrc template"
  ansible.builtin.template:
    src: "zshrc.j2"
    dest: "{{ ansible_facts['user_dir'] }}/.zshrc"
    mode: "0644"
  tags: [zsh, zshrc, dotfiles]

- name: "Refresh zcompdump"
  tags: [zsh, zcompdump, dotfiles]
  when: zsh_manage_zcompdump
  block:
    - name: "Delete zcompdump"
      ansible.builtin.file:
        path: "{{ ansible_facts['user_dir'] }}/.zcompdump"
        state: absent
    - name: "Generate zcompdump"
      ansible.builtin.shell:
        cmd: "autoload -Uz compinit && compinit"
        executable: "{{ zsh_bin_path }}"
        creates: "{{ ansible_facts['user_dir'] }}/.zcompdump"
