---

- name: Include system defaults
  ansible.builtin.include_vars:
    file: "{{ ansible['system'] }}.yml"
  tags: always

- name: Set Homebrew prefix
  ansible.builtin.set_fact:
    zsh_homebrew_prefix: "{{ zsh_default_homebrew_prefix }}"
  when: zsh_homebrew_prefix | length == 0
  tags: always

- name: Install zsh (via OS package manager)
  vars:
    pkgs_packages: "zsh"
  ansible.builtin.include_role:
    name: "pkgs"
    apply:
      tags: [zsh]
  when: (ansible['system'] == "Linux") and (not zsh_prefer_homebrew)
  tags: [zsh, install]

- name: Install zsh (via Homebrew)
  vars:
    pkgs_homebrew_formulas: "zsh"
  ansible.builtin.include_role:
    name: "pkgs"
    apply:
      tags: [zsh]
  when: (ansible['system'] == "Darwin") or (zsh_prefer_homebrew)
  tags: [zsh, install]

- name: Set Zsh bin path
  ansible.builtin.set_fact:
    zsh_bin_path: "{{ zsh_prefer_homebrew | ternary(zsh_homebrew_bin, zsh_default_bin }}"
  when: zsh_bin_path | length == 0
  tags: always

- name: Configure Homebrew Zsh for MacOS
  when: (ansible['system'] == "Darwin") and (zsh_prefer_homebrew)
  tags: [zsh]
  block:
    - name: Add Homebrew Zsh to available shells
      ansible.builtin.blockinfile:
        path: "/etc/shells"
        block: |
          {{ zsh_homebrew_prefix }}/bin/zsh
    - name: Fix Homebrew Zsh folder permissions
      ansible.builtin.file:
        path: "{{ item }}"
        mode: "0755"
      loop: "{{ zsh_chmod_directories }}"

- name: Get current Zsh version
  ansible.builtin.command:
    cmd: "{{ zsh_bin_path }}/zsh --version"
  register: cmd_zsh_version
  changed_when: false
  tags: always

- name: Set Zsh as default shell
  ansible.builtin.user:
    name: "{{ ansible['user_id'] }}"
    shell: "{{ zsh_bin_path }}"
  become: true
  when: ansible['user_shell'] != zsh_bin_path
  tags: [zsh]

- name: Install Zsh plugins
  ansible.builtin.git:
    repo: "{{ item['repo'] }}"
    dest: "{{ zsh_plugin_dir }}/{{ item['name'] }}"
    depth: 1
    version: "{{ item['version'] | default(omit) }}"
  loop: "{{ zsh_plugins }}"
  loop_control:
    label: "{{ item['name'] }}"
  tags: [zsh, dotfiles]

- name: Generate Zsh completions
  ansible.builtin.shell: "{{ item['command'] }} > {{ zsh_site_functions }}/_{{ item['name'] }}"
  changed_when: false
  loop: "{{ zsh_completions }}"
  loop_control:
    label: "{{ item['name'] }}"
  tags: [zsh, dotfiles]

- name: Apply zshrc template
  vars:
    template:
      - "{{ inventory_dir }}/templates/zshrc.j2 }}"
      - "zshrc.j2"
  ansible.builtin.template:
    src: "{{ lookup('ansible.builtin.first_found', template) }}"
    dest: "{{ ansible['user_dir'] }}/.zshrc"
    mode: "0644"
  tags: [zsh, dotfiles]

- name: Refresh zcompdump
  tags: [zsh, dotfiles]
  when: zsh_manage_zcompdump
  block:
    - name: Delete zcompdump
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.zcompdump"
        state: absent
    - name: Generate zcompdump
      ansible.builtin.shell:
        cmd: "autoload -Uz compinit && compinit"
        executable: "{{ zsh_exec }}"
        creates: "{{ ansible_user_dir }}/.zcompdump"
