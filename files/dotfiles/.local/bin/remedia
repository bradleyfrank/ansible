#!/usr/bin/env bash

# @meta describe Renames media downloaded from torrents
# @meta author Brad Frank
# meta require-tools rename mnamer rsync uni2ascii trash


_title_parser() {
  local filename_normalized segments
  local -A title

  filename_normalized="$(basename "$1" \
    | tr '.' '_' \
    | tr ' ' '_' \
    | uni2ascii -Bq \
    | sed 's/[^a-zA-Z0-9_]//g' \
    | tr '[:lower:]' '[:upper:]' \
  )"

  segments="$(sed --regexp-extended --quiet \
    "s/^(.*)_((19|20)[0-9]{2})_([A-Z0-9_]*)(720|1080|2160)P(.*)_(MKV|MP4)/\1\t\2\t\4/p" \
    <<< "$filename_normalized" \
  )"

  if [[ -z $segments ]]; then
    # if the regex fails 'segments' will probably be empty, so just
    # return the original filename (without the extension)
    basename -s ".${1##*.}" -- "$1"
    return 0
  fi

  title['name']="$(awk -F '\t' '{print $1}' <<< "$segments")"
  title['year']="$(awk -F '\t' '{print $2}' <<< "$segments")"
  title['edition']="$(awk -F '\t' '{print $3}' <<< "$segments")"

  # capitalize the name and uppercase [a select amount of] roman numerals
  title['name']="$(sed --regexp-extended \
    -e 's/.*/\L&/; s/[a-z]*/\u&/g' \
    -e 's/_([IVX])([ivx]*)_/_\1\U\2_/' \
    -e 's/^_*//g' \
    -e 's/_*$//g' \
    <<< "${title['name']}" \
  )"

  if [[ "${title['edition']}" != "" ]]; then
    title['edition']="$(sed \
      -e 's/OPEN_MATTE/IMAX/' \
      -e 's/_ANNIV_/_ANNIVERSARY_/' \
      -e 's/^_*//g' \
      -e 's/_*$//g' \
      <<< "${title['edition']}" \
    )"
    title['edition']=".{edition-${title['edition']}}"
  fi

  echo "${title['name']}.${title['year']}${title['edition']}"
}


_latin_to_ascii() {
  local new_filename file dir; dir="$1"

  pushd "$dir" &> /dev/null || exit 1

  while read -r file; do
    if [[ -d "$file" ]]; then
      _latin_to_ascii "$file"
    elif [[ -f "$file" ]]; then
      new_filename="$(uni2ascii -Bq <<< "$(basename "$file")")"
      mv --no-clobber "$file" "./${new_filename// /_}"
    fi
  done < <(find . -mindepth 1 -maxdepth 1)

  popd &> /dev/null || exit 1
}


# @cmd File renaming functions
# @alias r
# @option -m --movie <PATH+> Rename movie files
# @option -t --tv <PATH+> Rename TV files
rename() {
  local path

  if [[ -n $argc_movie ]]; then
    for path in "${argc_movie[@]}"; do
      rename_movie "$path"
    done
  fi

  if [[ -n $argc_tv ]]; then
    for path in "${argc_tv[@]}"; do
      if [[ ! -d "$path" ]]; then continue; fi
      pushd "$path" &> /dev/null || exit 1
      mnamer ./* \
        --batch \
        --episode-directory "Season_{season:02}" \
        --episode-format "S{season:02}E{episode:02}.{title}{extension}"
      find . -mindepth 1 -type d -empty -delete
      _latin_to_ascii "$(pwd)"
      rename -z ./**/*
      popd &> /dev/null || exit 1
    done
  fi
}

rename_movie() {
  local mp4_file srt_file new_title new_filename dir path extension; path="$1"
  local -r yellow="\033[0;136m" blue="\033[0;33m" reset="\033[0m"

  # Rename movie files in a directory
  if [[ -d "$path" ]]; then
    pushd "$path" &> /dev/null || exit 1

    # collect all English SRT files and keep the largest (it should be the SDH version)
    find . -mindepth 2 -iname "*eng*.srt" -type f -exec mv --target-directory ./ -- {} \;
    find . -maxdepth 1 -type f -name '*.srt' -printf '%s\t%p\n' \
      | sort --numeric-sort \
      | head --lines -1 \
      | awk --field-separator '\t' '{print $2}' \
      | xargs --no-run-if-empty -I {} rm "{}"

    find . -mindepth 1 -maxdepth 1 -type d -exec rm --recursive --force {} \;
    find . -mindepth 1 ! -name '*.srt' ! -name '*.mp4' -delete
    find . -type f -iname '*sample*.mp4' -delete

    mp4_file="$(find . -mindepth 1 -name '*.mp4')"
    srt_file="$(find . -mindepth 1 -name '*.srt')"

    new_title="$(_title_parser "$mp4_file")"

    mv --no-clobber "$mp4_file" "${new_title}.mp4"

    if [[ -n $srt_file ]]; then
      mv --no-clobber "$srt_file" "${new_title}.eng.srt"
    fi

    popd &> /dev/null || exit 1

    mv --no-clobber --no-target-directory ./"$path" ./"${new_title/\{edition-*\}./}"
  fi

  # Rename movie files individually
  if [[ -f $path ]]; then
    extension="${path##*.}"
    new_title="$(_title_parser "$path")"
    new_filename="${new_title}.${extension}"

    echo -e "${yellow}${path}${reset} ==> ${blue}${new_filename}${reset}"
    mv --no-clobber "$path" "$new_filename"

    if [[ "$extension" == "mp4" ]]; then
      dir="${new_title/\{edition-*\}./}"
      if [[ ! -d "$dir" ]]; then mkdir "$dir"; fi
      mv "$new_filename" --target-directory "$dir"
    fi
  fi
}


# @cmd Upload movies to Plex
# @alias u
# @option -m --movie <PATH+> Upload movie files
# @option -t --tv <PATH+> Upload TV files
upload() {
  set -e
  if [[ -n $argc_movie ]]; then
    rsync --archive --info=progress2 "${argc_movie[@]%/}" memory-alpha:/data/media/upload/
    # shellcheck disable=SC2029
    ssh memory-alpha "$(typeset -f sort_movies); sort_movies"
    trash -vF "${argc_movie[@]%/}" | xargs -I {} echo "{} (DELETED)"
  fi
}


sort_movies() {
  cd /data/media/movies || exit 1

  decade="$(date +%Y | cut --characters 1-3 | xargs -I {} echo "{} + 1" | bc)"
  year="$(find . -maxdepth 1 -mindepth 1 -type d -printf '%P\n' \
    | sort --numeric-sort \
    | head --lines 1 \
    | cut --characters 1-3 \
  )"

  cd /data/media/upload || exit 1

  while (( year < decade )); do
    find . -maxdepth 1 -regex ".*\.${year}[0-9]\(\..*\|$\)" -exec mv {} "../movies/${year}0/" \;
    year=$(( year+1 ))
  done
}

find . -type f -name '.DS_Store' -delete
eval "$(argc --argc-eval "$0" "$@")"
