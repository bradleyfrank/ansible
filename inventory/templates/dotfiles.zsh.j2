dotfiles() {
  local help repo branch tags skip_tags pull update debug verbose

  zparseopts -E -D -- \
    {b,-branch}:=branch \
    {t,-tags}:=tags \
    {s,-skip-tags}:=skip_tags \
    {p,-pull}=pull \
    {u,-update}=update \
    {h,-help}=help \
    {d,-debug}=debug \
    {v,-verbose}=verbose

  if [[ -n $help ]]
  then
    echo "dotfiles [-h] | [-b BRANCH] [-t TAGS] [-s SKIP-TAGS] [-p] [-u] [-d] [-v]"
    echo "  -h|--help       Show help"
    echo "  -b|--branch     Branch of Ansible repo to run playbook from"
    echo "  -t|--tags       Playbook tags to run (default: dotfiles)"
    echo "  -s|--skip-tags  Playbook tags to skip (default: install,become)"
    echo "  -p|--pull       Do a 'git pull' first"
    echo "  -u|--update     Update venv before running"
    echo "  -d|--debug      Switch Ansible output to default"
    echo "  -v|--verbose    Make Ansible output verbose"
    return 0
  fi

  git_branch="${branch[2]:-main}"
  repo="${HOME}/Development/Projects/ansible/${git_branch}"

  if [[ ! -d "$repo" ]]
  then
    echo "No Ansible branch '${git_branch}'" >&2
    return 1
  fi

  if [[ ! -f "${HOME}/.ansible/inventory/inventory.yml" ]]
  then
    echo "No 'inventory.yml' file" >&2
    return 1
  fi

  if [[ ! -L "${HOME}/.ansible/inventory/host_vars/localhost.yml" ]]
  then
    echo "No 'localhost.yml' host vars file" >&2
    return 1
  fi

  pushd "$repo" >/dev/null

  if [[ -n $pull ]]
  then
    bit stash
    git pull || return 1
    git stash pop
  fi


  source "${HOME}/.zshrc.d/benv.zsh"
  benv activate

  if [[ -n $debug || -n $verbose ]]
  then
    callback="ansible.builtin.default"
  else
    callback="ansible.builtin.unixy"
  fi

  ANSIBLE_STDOUT_CALLBACK="$callback" \
  ansible-playbook playbooks/site.yml \
    --vault-password-file =(op read op://{{ onepassword_vault }}/{{ ansible_facts['hostname'] }}/ansible-vault) \
    --tags "${tags[2]:-dotfiles}" \
    --skip-tags "${skip_tags[2]:-become,install}" \
    ${verbose:+-vvv}

  deactivate
  popd >/dev/null
}
