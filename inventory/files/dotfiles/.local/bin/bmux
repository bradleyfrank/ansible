#!/usr/bin/env bash

# @meta describe Utility scripts for tmux
# @meta author Brad Frank
# @meta require-tools tmux,fzf
# @meta combine-shorts


_get_window_name() {
  local cwd base_cwd username branch_name repo_name

  cwd="$1"
  base_cwd="$(basename "$cwd")"
  repo_name="$base_cwd"
  username="$(id --user --name)"

  pushd "$cwd" &> /dev/null || exit 1

  if branch_name="$(git branch --show-current 2>/dev/null)"; then
    [[ "$base_cwd" == "$branch_name" ]] && repo_name="$(basename "$(dirname "$cwd")")"
    echo "${repo_name} (${branch_name})"
  elif [[ "$base_cwd" == "$username" ]]; then
    echo "~${username}"
  else
    echo "$base_cwd"
  fi

  popd &> /dev/null || exit 1
}


_get_project_dir() {
  find "${HOME}/Development/Projects" -mindepth 2 -maxdepth 2 -type d \
    | fzf-tmux -p --reverse --no-multi --delimiter / --with-nth -2,-1 \
    --preview="eza --color always --classify --no-user --no-permissions --long --all --git {} --"
}


_select_session() {
  tmux list-session -F "#{session_name}" \
    | fzf-tmux --no-multi -p --preview="tmux list-windows -t {} -F '#{window_name}' --"
}


# @cmd Rename window with Git branch info
# @arg dir!
rename() {
  tmux rename-window "$(_get_window_name "$argc_dir")"
}


# @cmd Open a project in a new window or session
# @arg directory Project directory
# @option -c --command Command to run in new window
# @flag -s --new-session Open the window in a new session
open() {
  local window_name session_name

  [[ -z "$argc_directory" ]] && argc_directory="$(_get_project_dir)"
  [[ -z "$argc_directory" ]] && exit 0

  window_name="$(_get_window_name "$argc_directory")"

  if [[ -n $argc_new_session ]]; then
    session_name="$(awk '{print $1}' <<< "$window_name")"
    if tmux has-session -t "$session_name" 2>/dev/null; then
      tmux new-window -n "$window_name" -c "$argc_directory" -d
    else
      tmux new-session -s "$session_name" -n "$window_name" -c "$argc_directory" -d
    fi
  else
    session_name="$(tmux display-message -p "#S")"
    tmux new-window -n "$window_name" -c "$argc_directory" -d
  fi

  tmux switch-client -t "${session_name}:${window_name}"
  if [[ -n "$argc_command" ]]; then
    tmux send-keys -t "${session_name}:${window_name}" "$argc_command" Enter
  fi
}


# @cmd Save pane output to file
# @option -o --output <FILE> Output file
dump() {
  local window_name session_name output_dir output_temp

  session_name="$(tmux display-message -p "#{session_name}")"
  output_temp="$(mktemp)"

  if [[ -z $argc_output ]]; then
    argc_output="${HOME}/Development/Logs/$(tmux display-message -p \
      'tmux-%Y-%b-%d-%H%M-#{session_name}.log' | tr -cd '[:print:]')"
  fi

  output_dir="$(dirname "$argc_output")"

  mkdir --parents "$(dirname "$argc_output")"
  tmux capture-pane -S -
  tmux save-buffer "$output_temp"
  cat -s "$output_temp" > "$argc_output"
  rm "$output_temp"

  window_name="$(_get_window_name "$output_dir")"
  tmux new-window -n "${window_name}" -c "$output_dir" -d
  tmux switch-client -t "${session_name}:${window_name}"
  tmux send-keys -t "${session_name}:${window_name}" "vim ${argc_output}; clear" Enter
}


# @cmd Save session (tmux-resurrect)
save() {
  "${HOME}/.local/share/tmux-resurrect/scripts/save.sh"
}


eval "$(argc --argc-eval "$0" "$@")"
