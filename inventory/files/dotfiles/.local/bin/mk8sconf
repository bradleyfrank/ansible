#!/usr/bin/env bash

# @meta describe Generate or add entries to kubeconfig for GKE
# @meta author Brad Frank
# @meta require-tools fzf
# @meta combine-shorts


# @option -p --projects*,
# @flag -a --append
main() {
  local project projectId temp_cluster_list

  temp_cluster_list="$(mktemp)"
  KUBECONFIG="${KUBECONFIG:-"${HOME}/.kube/config"}"

  if [[ -z $argc_projects ]]; then
    argc_projects="$(gcloud projects list \
      --sort-by 'projectId' \
      --filter 'projectId !~ "^(sys|quickstart|test|gam)-.*" AND lifecycleState=ACTIVE' \
      --format 'value[separator=";"](projectId,name)' \
      | awk -F ';' '{print $1" ("$2")"}' \
      | fzf --multi
    )"
  fi

  if [[ -e $KUBECONFIG ]]; then
    cp "$KUBECONFIG" "${KUBECONFIG}.$(date --iso-8601=seconds | tr -d ':-')"
  fi

  if [[ -z $argc_append ]]; then
    rm -f "$KUBECONFIG"
  fi

  while read -r project; do
    projectId="$(awk -F ' ' '{print $1}' <<< "$project")"
    gcloud container clusters list \
      --project "$projectId" \
      --format="value[separator=' '](name,zone)" \
      | sed "s/^/${projectId} /g" \
      | awk '{print "("$1") " $2" "$1" "$3}' >> "$temp_cluster_list"
  done <<< "$argc_projects"

  while read -r cluster; do
    gcloud container clusters get-credentials "$(awk '{print $2}' <<< "$cluster")" \
      --project "$(awk '{print $3}' <<< "$cluster")" \
      --region "$(awk '{print $4}' <<< "$cluster")"
  done < <(fzf --multi --with-nth 2,1 < "$temp_cluster_list")

  rm "$temp_cluster_list"
}

eval "$(argc --argc-eval "$0" "$@")"
