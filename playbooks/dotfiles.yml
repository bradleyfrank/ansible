---

- name: Install and configure dotfiles on localhost
  hosts: localhost

  handlers:

    - name: Process backups
      vars:
        backup_var: "{{ lookup('vars', item) }}"
      ansible.builtin.include_tasks: handlers/backups.yml
      when: backup_var['backup_file'] is defined
      loop: "{{ query('varnames', '^_backup_.+$') }}"
      loop_control:
        label: "{{ item | replace('_backup_', '') }}"
      tags: ['always', 'backups']

  tasks:

    - name: Import os-specific variables
      ansible.builtin.include_vars: "{{ ansible_system }}.yml"
      tags: always

    - name: Ensure backup directory exists
      ansible.builtin.file:
        path: "{{ backups_dir }}"
        state: directory
        mode: 0755
      tags: always

# ============================================================================
#  dotfiles and command line configuration
# ----------------------------------------------------------------------------

    - name: Create ~/Development folder structure
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/Development/{{ item }}"
        state: directory
        mode: 0755
      loop: ['Projects', 'Build', 'Scratch', 'Reference', 'Logs']
      tags: core

    - name: Install dotfiles
      ansible.posix.synchronize:
        src: dotfiles/
        dest: "{{ ansible_user_dir }}/"
        compress: false
        owner: false
        group: false
      tags: [core, dotfiles]

    - name: Install themes for bat
      ansible.builtin.command: "{{ bat_exec }} cache --build"
      changed_when: false
      tags: core

    - name: Ensure glow config directory exists
      ansible.builtin.file:
        path: "{{ glow_config_path }}"
        state: directory
        mode: 0755
      tags: [core, glow]

    - name: Install glow configs
      ansible.builtin.copy:
        src: apps/glow/
        dest: "{{ glow_config_path }}/"
        mode: 0644
      tags: [core, glow]

    - name: Import ssh tasks
      ansible.builtin.import_tasks: tasks/dotfiles/ssh.yml
      tags: [ssh, core]

    - name: Include git tasks  # must follow ssh key creation
      ansible.builtin.import_tasks: tasks/dotfiles/git.yml
      tags: [git, core]

    - name: Import tmux tasks
      ansible.builtin.import_tasks: tasks/dotfiles/tmux.yml
      tags: [tmux, core]

    - name: Import vim tasks
      ansible.builtin.import_tasks: tasks/dotfiles/vim.yml
      tags: [vim, core]

    - name: Include k8s tasks
      ansible.builtin.import_tasks: tasks/dotfiles/k8s.yml
      tags: [k8s, core]

# ============================================================================
#  assets and modules
# ----------------------------------------------------------------------------

    - name: Ensure fonts directory exists
      ansible.builtin.file:
        path: "{{ font_dir }}"
        state: directory
        mode: 0700
      tags: fonts

    - name: Copy fonts
      ansible.builtin.copy:
        src: fonts/
        dest: "{{ font_dir }}/"
        mode: 0644
      when: "'desktop' in system_type"
      tags: fonts

    - name: Import GitHub tasks
      ansible.builtin.import_tasks: tasks/dotfiles/github.yml
      tags: github

    - name: Install Python packages
      ansible.builtin.pip:
        executable: "{{ pip_exec }}"
        name: "{{ pypi_packages }}"
        extra_args: --user
      tags: python

# ============================================================================
#  gui apps configuration
# ----------------------------------------------------------------------------

    - name: Ensure alacritty config directory exists
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.config/alacritty"
        state: directory
        mode: 0755
      tags: alacritty

    - name: Apply Alacritty template
      ansible.builtin.template:
        src: alacritty.yml.j2
        dest: "{{ ansible_user_dir }}/.config/alacritty/alacritty.yml"
        mode: 0644
        backup: true
      register: _backup_alacritty
      notify: Process backups
      tags: alacritty

    - name: Import misc macOS app tasks
      ansible.builtin.import_tasks: tasks/dotfiles/mac_apps.yml
      when: "'MacOSX' in ansible_distribution"
      tags: [bbedit, stats]

    - name: Update macOS app icons
      vars:
        app: "/Applications/{{ item['path'] | splitext | first }}.app"
      ansible.builtin.include_tasks: tasks/dotfiles/mac_icons.yml
      when: "'MacOSX' in ansible_distribution"
      loop: "{{ lookup('community.general.filetree', 'macOS/icons/') }}"
      loop_control:
        label: "{{ app }}"
      tags: icons

# ============================================================================
#  zsh and completions
# ----------------------------------------------------------------------------

    - name: Import Zsh tasks
      ansible.builtin.import_tasks: tasks/dotfiles/zsh.yml
      tags: [core, zsh, dotfiles]
