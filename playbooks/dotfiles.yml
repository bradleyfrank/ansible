---

- name: Install and configure dotfiles on localhost
  hosts: localhost

  tasks:
    - name: Include common variables
      ansible.builtin.include_vars: common.yml
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "system_{{ ansible_system }}.yml"
      tags: always

    - name: Include Linux distribution variables
      ansible.builtin.include_vars: "os_{{ distro_vars[ansible_distribution] }}.yml"
      when: ansible_system == 'Linux'
      tags: always

    - name: Create ~/Development folder structure
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/Development/{{ item }}"
        state: directory
        mode: 0755
      loop: ['Projects', 'Build', 'Scratch', 'Reference']
      tags: devdirs

    - name: Clone reference Git repositories
      ansible.builtin.git:
        repo: "{{ item['https_url'] }}"
        dest: "{{ ansible_user_dir }}/Development/Reference/{{ item['name'] }}"
        depth: '1'
        version: "{{ item['version'] | default('master') }}"
      loop: "{{ git_reference_repos }}"
      loop_control:
        label: "{{ item['name'] }}"
      tags: git_reference

    - name: Create dotfile directory structure
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/{{ item['path'] }}"
        state: directory
        mode: 0755
      loop: "{{ lookup('community.general.filetree', 'dotfiles/') }}"
      loop_control:
        label: "{{ item['path'] }}"
      when: item['state'] == 'directory'
      tags: ['apps', 'core']

    - name: Copy dotfiles into home directory
      ansible.builtin.copy:
        src: "{{ item['src'] }}"
        dest: "{{ ansible_user_dir }}/{{ item['path'] }}"
        mode: 0644
      loop: "{{ lookup('community.general.filetree', 'dotfiles/') }}"
      loop_control:
        label: "{{ item['path'] }}"
      when: item['state'] == 'file'
      tags: ['apps', 'core']

    - name: Make scripts executable
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.local/bin"
        state: directory
        mode: 0755
        recurse: true
      tags: ['dotfiles', 'core']

    - name: Ensure fonts directory exists
      ansible.builtin.file:
        path: "{{ font_dir }}"
        state: directory
        mode: 0700
      tags: fonts

    - name: Copy fonts
      ansible.builtin.copy:
        src: fonts/
        dest: "{{ font_dir }}/"
        mode: 0644
      tags: fonts

    - name: Install themes for bat
      ansible.builtin.command: "{{ bat_cmd }} cache --build"
      changed_when: false
      tags: bat

    - name: Create vim extensions directory path
      ansible.builtin.file:
        path: "{{ vim_extensions_dest }}"
        state: directory
        mode: 0755
      tags: vim

    - name: Install vim extensions
      ansible.builtin.git:
        repo: "{{ item['repo'] }}"
        dest: "{{ vim_extensions_dest }}/{{ item['name'] }}"
        depth: '1'
        version: "{{ item['version'] | default(omit) }}"
      loop: "{{ vim_extensions }}"
      loop_control:
        label: "{{ item['name'] }}"
      tags: vim

    - name: Apply alacritty template
      ansible.builtin.template:
        src: alacritty.yml.j2
        dest: "{{ ansible_user_dir }}/.config/alacritty/alacritty.yml"
        mode: 0644
        backup: true
      register: _backup_alacritty
      tags: ['alacritty', 'core']

    - name: Apply zshrc template
      ansible.builtin.template:
        src: zshrc.j2
        dest: "{{ ansible_user_dir }}/.zshrc"
        mode: 0644
        backup: true
      register: _backup_zshrc
      tags: ['zsh', 'core']

    - name: Ensure ~/.ssh directory exists
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.ssh"
        state: directory
        mode: 0755
      tags: ssh

    - name: Set proper permissions on ~/.ssh/authorized_keys
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.ssh/authorized_keys"
        state: touch
        mode: 0600
      tags: ssh

    - name: Install SSH config
      ansible.builtin.copy:
        src: conf/ssh/config
        dest: "{{ ansible_user_dir }}/.ssh/config"
        mode: 0644
        backup: true
      register: _backup_ssh_config
      when: not work_system
      tags: ['never', 'ssh_config']

    - name: Get tmux version
      ansible.builtin.command: tmux -V
      register: tmux_version
      changed_when: false
      tags: ['tmux', 'core']

    - name: Install tmux config
      vars:
        tmux_semver: "{{ tmux_version['stdout'].split(' ') | last }}"
      ansible.builtin.template:
        src: tmux.conf.j2
        dest: "{{ ansible_user_dir }}/.tmux.conf"
        mode: 0644
        backup: true
      register: _backup_tmux_conf
      tags: ['tmux', 'core']

    - name: Install gitconfig
      ansible.builtin.template:
        src: gitconfig.j2
        dest: "{{ ansible_user_dir }}/.gitconfig"
        mode: 0755
        backup: true
      register: _backup_gitconfig
      tags: ['git', 'core']

    - name: Check if vscode is installed
      ansible.builtin.stat:
        path: "{{ vscode['bin'] }}"
      register: vscode_bin
      tags: ['vscode', 'core']

    - name: Import VSCode tasks
      ansible.builtin.import_tasks: tasks/dotfiles/vscode.yml
      when: vscode_bin['stat']['exists']
      tags: ['vscode', 'core']

    - name: Import kubectl tasks
      ansible.builtin.import_tasks: tasks/dotfiles/kubectl.yml
      tags: kubectl

    - name: Clone public and private GitHub repositories
      ansible.builtin.import_tasks: tasks/dotfiles/github.yml
      when: not work_system
      tags: github_projects

    - name: Set squircle icons
      vars:
        app: "{{ item['path'] | splitext | first }}"
      ansible.builtin.command: "fileicon set /Applications/{{ app }}.app {{ item['src'] }}"
      when: "'Darwin' in ansible_system"
      changed_when: false
      loop: "{{ lookup('community.general.filetree', 'conf/MacOSX/icons/') }}"
      loop_control:
        label: "{{ app }}"
      tags: icons

    - name: Ensure backup directory exists
      ansible.builtin.file:
        path: "{{ backups_dir }}"
        state: directory
        mode: 0755

    - name: Process backups
      vars:
        backup_var: "{{ lookup('vars', item) }}"
        backup_file: "{{ backup_var['dest'] | basename | replace('.', '') }}"
      ansible.builtin.include_tasks: tasks/backups.yml
      when: backup_var['backup_file'] is defined
      loop: "{{ query('varnames', '^_backup_.+$') }}"
      loop_control:
        label: "{{ backup_file }}"
      tags: ['always', 'backups']
