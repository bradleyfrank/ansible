PATH="$HOME/.local/bin"
PATH="$PATH:$HOME/.krew/bin"
{% if 'MacOSX' in ansible_distribution %}
{% for gnubin in homebrew_gnubin['files'] -%}
PATH="$PATH:{{ gnubin['path'] }}"
{% endfor %}
PATH="$PATH:{{ python_user_path }}"
PATH="$PATH:{{ homebrew_prefix }}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin"
{% if 'arm64' in ansible_machine %}
PATH="$PATH:{{ homebrew_prefix }}/bin:{{ homebrew_prefix }}/sbin"
{% endif %}
{% elif 'Ubuntu' in ansible_distribution %}
PATH="$PATH:/snap/bin"
{% endif %}
PATH="$PATH:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"

MANPATH="$HOME/.local/share/man"
{% if 'MacOSX' in ansible_distribution %}
{% for gnuman in homebrew_gnuman['files'] -%}
MANPATH="$MANPATH:{{ gnuman['path'] }}"
{% endfor %}
{% if 'arm64' in ansible_machine %}
MANPATH="$MANPATH:{{ homebrew_prefix }}/share/man"
{% endif %}
{% endif %}
MANPATH="$MANPATH:/usr/local/share/man:/usr/share/man"

FPATH="$HOME/.local/share/zsh/site-functions:$FPATH"

export PATH
export MANPATH
export FPATH
export EDITOR=vim
export VISUAL=vim
export DIRSTACKSIZE=10                  # Max directories in auto_pushd stack
export DOCKER_BUILDKIT=1                # Build containers in parallel
export LESS_TERMCAP_mb=$'\E[01;32m'     # Add colors to manpages
export LESS_TERMCAP_md=$'\E[01;32m'     # "
export LESS_TERMCAP_me=$'\E[0m'         # "
export LESS_TERMCAP_se=$'\E[0m'         # "
export LESS_TERMCAP_so=$'\E[01;47;34m'  # "
export LESS_TERMCAP_ue=$'\E[0m'         # "
export LESS_TERMCAP_us=$'\E[01;36m'     # "
export LESS=-r                          # "
export CHTSH_QUERY_OPTIONS="style=vs"
export FZF_DEFAULT_OPTS="--reverse --height=50% --color=light --multi --info inline"
export PRE_COMMIT_COLOR=never           # Colors are incompatible with solarized-light
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=14"
{% if 'MacOSX' in ansible_distribution %}
export CLICOLOR=1
export CLOUDSDK_PYTHON=/usr/bin/python3
export HELPDIR={{ homebrew_prefix }}/Cellar/zsh/{{ zsh_version['stdout'] }}/share/zsh/help
export HOMEBREW_CELLAR={{ homebrew_prefix }}/Cellar
export HOMEBREW_PREFIX={{ homebrew_prefix }}
export HOMEBREW_REPOSITORY={{ homebrew_prefix }}/Homebrew
export INFOPATH={{ homebrew_prefix }}/share/info:"${INFOPATH:-}"
export SHELL_SESSIONS_DISABLE=1         # See /etc/zshrc_Apple_Terminal
{% elif 'Fedora' in ansible_distribution %}
export HELPDIR=/usr/share/zsh/{{ ansible_facts.packages['zsh'][0]['version'] }}/help
{% endif %}


{% if 'Ubuntu' not in ansible_distribution %}
unalias run-help
{% endif %}
alias help='run-help'  # help topics path set via $HELPDIR

alias gcommon='cd $(git rev-parse --git-common-dir | xargs dirname | xargs realpath --relative-to .)'
alias gtop='cd $(git rev-parse --show-toplevel | xargs realpath --relative-to .)'
alias gbranch='cd $(git worktree list --porcelain | grep -E "^worktree" | cut -d" " -f2 \
  | fzf --no-multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border --preview="git log {} --" -d / --with-nth -1)'

alias pyin='python3 -m pip install --user'
alias pyun='python3 -m pip uninstall'
alias pyup='python3 -m pip list --outdated --format=json 2>/dev/null | jq -r ".[].name" \
  | xargs --no-run-if-empty python3 -m pip install --user --upgrade'

alias l='exa --color always --classify'
alias la='exa --color always --classify --all'
alias lc='exa --color always --classify --long --all --grid'
alias ld='exa --color always --classify --long --all --only-dirs'
alias lg='exa --color always --classify --long --all --git'
alias ll='exa --color always --classify --long --all --group'
alias lp='exa --color always --classify --long --all --no-permissions --octal-permissions'
alias lS='exa --color always --classify --long --all --group-directories-first --sort size'
alias ls='ls --color --classify --human-readable'
alias lt='exa --color always --classify --long --all --sort time'

alias condense='grep -Erv "(^#|^$)"'
alias cp='cp -i'
alias dotfiles='ansible-playbook playbooks/dotfiles.yml'
alias e='extract'
alias glances='glances --theme-white'
alias isodate='date --iso-8601=seconds'
alias mkpasswd='pwgen 16 1 -ABcny1'
alias mp='multipass'
alias psync='rsync -a --info=progress2'
alias pubip='dig myip.opendns.com @resolver1.opendns.com'
alias scp='rsync -va'
alias timestamp='date +%F_%T | tr -d ":-" | tr "_" "-"'
alias vs='code .'
alias vwd='venvs_path'
{% if 'Linux' in ansible_system %}
alias iowatch='watch -n 1 iostat -xy --human 1 1'
alias ipa='ip -c a'
alias lsblk='lsblk -o "NAME,FSTYPE,SIZE,UUID,MOUNTPOINT"'
alias lsports='lsof -i -P -n'
alias proc='ps -e --forest -o pid,ppid,user,time,cmd'
{% endif %}
{% if 'Ubuntu' in ansible_distribution %}
alias bat='batcat'
{% endif %}

cdf() { cd $(dirs -lp | fzf --no-multi); }
cmark() { fc -ln "${1:-10}" | fzf --ansi -i --exit-0 --multi >> "$HOME/Development/Logs/$(date +%Y-%b-%d).zsh_history"; }
code-remote() { code --remote=ssh-remote+"$1" /home/{{ ansible_user_id }}; }
dw() { diceware -d- -n"${1:-5}"; }
jekyll() { docker run --rm --volume="${1:-$PWD}:/srv/jekyll" --publish "${2:-4000}:4000" jekyll/jekyll jekyll serve; }
mux() { tmuxp load -y notes projects{% if work_system %} work{% endif %}; }
numware() { n="${1:-5}"; echo "$(dw "$n")"-"$(for _ in $(seq "$n"); do echo -n $((RANDOM % 10)); done)"; }
show() { [[ "${${(@s/:/)$(whence -w "$1")}[2]}" =~ command ]] && bat "$(which "$1")" || whence -f "$1"; }
tardir() { tar -czf "${1%/}".tar.gz "$1"; }
tim() { tmux split-window -h -c "$(pwd)" "vim $1"; }


zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'         # Case insensitive tab completion
zstyle ':completion:*' completer _expand_alias _complete _ignored # Expand aliases with tab
zstyle ':completion:*' menu select                 # Use menu selection for completion
zstyle ':completion:*' list-suffixes               # Show ambiguous components for partial pathnames
zstyle ':completion:*' rehash true                 # Auto find new executables in path
zstyle ':completion:*' accept-exact '*(N)'         # Speed up completions
zstyle ':completion:*' use-cache on                # "
zstyle ':completion:*' cache-path ~/.zsh/cache     # "

WORDCHARS=${WORDCHARS//\/[&;]}                     # Don't consider these part of the word
CORRECT_IGNORE_FILE='[_|.]*'                       # Skip correcting commands matching pattern
HISTFILE=~/.zsh_history
HISTSIZE=2000
SAVEHIST=5000

setopt appendhistory           # Immediately append history instead of overwriting
setopt auto_pushd              # Push directories onto stack
setopt autocd                  # Change directory without `cd`
setopt correct                 # Auto correct mistakes
setopt extended_history        # Save each commands beginning timestamp and the duration
setopt extendedglob            # Extended globbing. Allows using regular expressions with *
setopt hist_verify             # Confirm commands from history expansion
setopt histignorealldups       # If a new command is a duplicate, remove the older one
setopt inc_append_history_time # Time taken by the command is recorded correctly in the history file
setopt nobeep                  # No beep
setopt nocaseglob              # Case insensitive globbing
setopt numericglobsort         # Sort filenames numerically when it makes sense
setopt pushd_ignore_dups       # Ignore duplices in the directory stack
setopt rcexpandparam           # Array expension with parameters

cdpath=("$HOME/Development" "$HOME/Development/Projects")

autoload -Uz compinit bashcompinit zmv zcalc vcs_info edit-command-line run-help
compinit -C && bashcompinit
zle -N edit-command-line

bindkey -e
bindkey '^X^E' edit-command-line
bindkey '\033' edit-command-line
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word


{% if 'MacOSX' in ansible_distribution %}
source {{ homebrew_prefix }}/opt/fzf/shell/completion.zsh
source {{ homebrew_prefix }}/opt/fzf/shell/key-bindings.zsh
source {{ homebrew_prefix }}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source {{ homebrew_prefix }}/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source {{ homebrew_prefix }}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc
{% elif 'Fedora' in ansible_distribution %}
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /usr/share/fzf/shell/key-bindings.zsh
{% elif 'Ubuntu' in ansible_distribution %}
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /usr/share/doc/fzf/examples/completion.zsh
source /usr/share/doc/fzf/examples/key-bindings.zsh
{% endif %}
{% for plugin in zsh_plugins %}
source $HOME/.local/share/{{ plugin['name'] }}/{{ plugin['source'] }}
{% endfor %}
for rc in {{ zsh['rc.d'] }}/*; do source "$rc"; done


{% if work_system -%}
complete -o nospace -C /usr/local/bin/terraform terraform
complete -o nospace -C /usr/local/bin/vault vault


{% endif %}
eval "$(dircolors $HOME/.dir_colors)"
eval "$(starship init zsh)"
eval "$(keychain --eval --ignore-missing --quiet
{%- if 'MacOSX' in ansible_distribution %} --inherit any
{%- else %}
{%- endif %} id_rsa id_ed25519 id_home id_ansible google_compute_engine)"

if [[ "$TERM_PROGRAM" == "vscode" ]]; then
  vscwd="$(basename $(pwd))"
  tmux -L "$vscwd" -f ~/.config/tmux/vscode.conf new-session -A -s "$vscwd"
fi
