PATH="$HOME/.local/bin"
PATH="$PATH:$HOME/.krew/bin"
{% if 'Darwin' in ansible_system %}
PATH="$PATH:/usr/local/opt/coreutils/libexec/gnubin"
PATH="$PATH:/usr/local/opt/gnu-tar/libexec/gnubin"
PATH="$PATH:/usr/local/opt/ed/libexec/gnubin"
PATH="$PATH:/usr/local/opt/grep/libexec/gnubin"
PATH="$PATH:/usr/local/opt/gnu-sed/libexec/gnubin"
PATH="$PATH:/usr/local/opt/gawk/libexec/gnubin"
PATH="$PATH:/usr/local/opt/findutils/libexec/gnubin"
PATH="$PATH:{{ python_user_path }}"
PATH="$PATH:/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin"
PATH="$PATH:/opt/X11/bin"
{% endif %}
PATH="$PATH:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"

MANPATH="$HOME/.local/share/man"
{% if 'Darwin' in ansible_system %}
MANPATH="$MANPATH:/usr/local/opt/coreutils/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/gnu-tar/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/ed/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/grep/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/gnu-sed/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/gawk/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/findutils/libexec/gnuman"
{% endif %}
MANPATH="$MANPATH:/usr/local/share/man:/usr/share/man"


export PATH
export MANPATH
export VISUAL=vim
export EDITOR=vim
export DOCKER_BUILDKIT=1                # Build containers in parallel
export FZF_DEFAULT_OPTS="--reverse --height=50% --color=light --multi"
export LESS_TERMCAP_mb=$'\E[01;32m'     # Add colors to manpages
export LESS_TERMCAP_md=$'\E[01;32m'     # "
export LESS_TERMCAP_me=$'\E[0m'         # "
export LESS_TERMCAP_se=$'\E[0m'         # "
export LESS_TERMCAP_so=$'\E[01;47;34m'  # "
export LESS_TERMCAP_ue=$'\E[0m'         # "
export LESS_TERMCAP_us=$'\E[01;36m'     # "
export LESS=-r                          # "
export PRE_COMMIT_COLOR=never           # pre-commit colors incompatible with solarized-light
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=14"
{% if 'Darwin' in ansible_system %}
export SHELL_SESSIONS_DISABLE=1         # See /etc/zshrc_Apple_Terminal
export CLICOLOR=1
export HOMEBREW_PREFIX=/usr/local
export HOMEBREW_CELLAR=/usr/local/Cellar
export HOMEBREW_REPOSITORY=/usr/local/Homebrew
export INFOPATH=/usr/local/share/info:"${INFOPATH:-}"
export CLOUDSDK_PYTHON=/usr/bin/python3
{% endif %}


{% if 'Darwin' in ansible_system %}
eval "$(keychain --eval --ignore-missing --quiet --inherit any {{ ssh_keys | join(' ') }})"
{% elif 'Linux' in ansible_system %}
eval "$(keychain --eval --ignore-missing --quiet {{ ssh_keys | join(' ') }})"
{% endif %}
eval "$(dircolors $HOME/.dir_colors)"


alias _inline_fzf_nh='fzf --multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border rounded'
alias _inline_fzf_nh_single='fzf --no-multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border rounded'
alias _inline_fzf='fzf --multi --ansi -i -1 --height=50% --reverse -0 --header-lines=1 --inline-info --border rounded'
alias archivebox='docker run -v $PWD:/data -it archivebox/archivebox'
alias condense='grep -Erv "(^#|^$)"'
alias cp='cp -i'
alias df='df -h'
alias dmux='tmux new -s "$(diceware 2)"'
alias e='extract'
alias glances='glances --theme-white'
alias grep='grep -I'
alias hadolint='docker run --rm -i ghcr.io/hadolint/hadolint <'
alias isodate='date --iso-8601=seconds'
alias krew='kubectl krew'
alias lc='ll --grid'
alias ld='ll --only-dirs'
alias lg='ll --git'
alias lG='ll --group'
alias ll='exa --color always --classify --long --all'
alias lp='ll --no-permissions --octal-permissions'
alias lS='ll --group-directories-first --sort size'
alias ls='ls --color --classify --human-readable'
alias lt='ll --sort time'
alias mat='glow -s light'
alias mp='multipass'
alias mux='[[ -z "$TMUX" ]] && tmux new-session -A -s main || return 1'
alias pipi='python3 -m pip install --user'
alias pipr='python3 -m pip uninstall'
alias pipu='python3 -m pip list --outdated --format=json 2>/dev/null | jq -r ".[].name" | xargs python3 -m pip install --user --upgrade'
alias pubip='dig myip.opendns.com @resolver1.opendns.com'
alias scp='rsync'
alias show='whence -f'
alias sync='rsync -a --info=progress2'
alias tf='terraform'
alias timestamp='date +%F_%T | tr -d ":-" | tr "_" "-"'
alias vs='code .'
{% if 'Darwin' in ansible_system %}
alias osupdate='sudo softwareupdate -ia'
alias pbb='macdown ~/Development/Reference/pure-bash-bible/README.md'
alias readme='macdown README*'
{% elif 'Linux' in ansible_system %}
alias bat='batcat'
alias free='free -g'
alias iowatch='watch -n 1 iostat -xy --human 1 1'
alias ipa='ip -c a'
alias lsblk='lsblk -o "NAME,FSTYPE,SIZE,UUID,MOUNTPOINT"'
alias lsports='lsof -i -P -n'
alias osupdate='sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y'
alias pbb='ghostwriter ~/Development/Reference/pure-bash-bible/README.md'
alias proc='ps -e --forest -o pid,ppid,user,time,cmd'
{% endif %}

alias -g _groot='$(git rev-parse --git-common-dir | xargs dirname | xargs realpath --relative-to .)'
alias -g _gtop='$(git rev-parse --show-toplevel | xargs realpath --relative-to .)'
alias -g _gwt='$(git worktree list --porcelain | sed -rn "s/^worktree\s(.+)$/\1/p" | _inline_fzf_nh_single --delimiter / --with-nth -1)'


blackdiff() { black --line-length 100 --diff "$@"; }
cheat() { curl -s "cheat.sh/$1?style=vs"; }
crackpdf() { qpdf --password="$1" --decrypt "$2" "${2%.*}"-decrypted.pdf; }
dtags() { wget -q https://registry.hub.docker.com/v1/repositories/"$1"/tags -O - | jq -r '.[].name'; }
diceware() { keepassxc-cli diceware --words "${1:-5}" | tr " " "-"; }
decrypt() { openssl enc -d -aes-256-cbc -in "$1" -out "$1.decrypted"; }
encrypt() { openssl enc -aes-256-cbc -salt -in "$1" -out "$1.encrypted"; }
httptrace() { curl -s -L -D - "$1" -o /dev/null -w "%{url_effective}\n"; }
mkpasswd() { keepassxc-cli generate -L "${1:-16}" -lUn --exclude-similar; }
tardir() { tar -czf "${1%/}".tar.gz "$1"; }
tnw() { tmux send-keys -t "$(tmux new-window -n "$1" -P)" "cd ~/Development/Projects/$1 && clear" C-m; }
{% if 'Linux' in ansible_system %}
gedit() { nohup /usr/bin/gedit "$@" &> /dev/null &; }
{% endif %}

pyenv() {
  local pyname pyver=3.8 pyfunc

  while getopts ':acdhn:v:' flag; do
    case "$flag" in
      a) pyfunc=activate ;;
      c) pyfunc=create ;;
      d) deactivate ; return $? ;;
      h) echo "Usage: pyenv [-a(ctivate) | -c(reate)] [-n <name> -v <version>] | -d(eactivate)" ; return 0 ;;
      n) pyname=$OPTARG ;;
      v) pyver=$OPTARG ;;
      *) echo "Invalid argument." >&2 ; return 1 ;;
    esac
  done

  case "$pyfunc" in
    create)   [[ -z $pyname ]] && pyname=ve
              virtualenv -p "$pyver" "$pyname"
              ;;
    activate) [[ -z $pyname ]] && pyname=$(dirname "$(find . -maxdepth 2 -type f -name pyvenv.cfg)")
              source "$pyname"/bin/activate
              ;;
    *)        [[ -z $pyname ]] && pyname=ve
              virtualenv -p "$pyver" "$pyname"
              source "${pyname-ve}"/bin/activate
              ;;
  esac
}


zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'         # Case insensitive tab completion
zstyle ':completion:*' completer _expand_alias _complete _ignored # Expand aliases with tab
zstyle ':completion:*' menu select                 # Use menu selection for completion
zstyle ':completion:*' list-suffixes               # Show ambiguous components for partial pathnames
zstyle ':completion:*' rehash true                 # Auto find new executables in path
zstyle ':completion:*' accept-exact '*(N)'         # Speed up completions
zstyle ':completion:*' use-cache on                # "
zstyle ':completion:*' cache-path ~/.zsh/cache     # "

WORDCHARS=${WORDCHARS//\/[&.;]}                    # Don't consider these part of the word
CORRECT_IGNORE_FILE='[_|.]*'                       # Skip correcting commands matching pattern
HISTFILE=~/.zsh_history
HISTSIZE=2000
SAVEHIST=5000

setopt appendhistory           # Immediately append history instead of overwriting
setopt autocd                  # If only directory path is entered, cd there.
setopt correct                 # Auto correct mistakes
setopt extended_history        # Save each commandâ€™s beginning timestamp and the duration
setopt extendedglob            # Extended globbing. Allows using regular expressions with *
setopt hist_verify             # Confirm commands from history expansion
setopt histignorealldups       # If a new command is a duplicate, remove the older one
setopt inc_append_history_time # Time taken by the command is recorded correctly in the history file
setopt nobeep                  # No beep
setopt nocaseglob              # Case insensitive globbing
setopt numericglobsort         # Sort filenames numerically when it makes sense
setopt rcexpandparam           # Array expension with parameters

autoload -Uz compinit zmv zcalc vcs_info edit-command-line && compinit
zle -N edit-command-line

bindkey -e                                         # Emacs style shortcuts
bindkey '^[[7~' beginning-of-line                  # Home key
bindkey '^[[H' beginning-of-line                   # Home key
if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line   # [Home] - Go to beginning of line
fi
bindkey '^[[8~' end-of-line                        # End key
bindkey '^[[F' end-of-line                         # End key
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}" end-of-line          # [End] - Go to end of line
fi
bindkey '^[[3~' delete-char                        # Delete key
bindkey '^[[C'  forward-char                       # Right key
bindkey '^[[D'  backward-char                      # Left key
bindkey '^[[5~' history-beginning-search-backward  # Page up key
bindkey '^[[6~' history-beginning-search-forward   # Page down key
bindkey '^X^E' edit-command-line


{% if 'Darwin' in ansible_system -%}
source /usr/local/opt/fzf/shell/completion.zsh
source /usr/local/opt/fzf/shell/key-bindings.zsh
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc
{% elif 'Linux' in ansible_system -%}
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
{% endif -%}
{% if ('Ubuntu' in ansible_distribution) or ('Pop!_OS' in ansible_distribution) -%}
source /usr/share/doc/fzf/examples/completion.zsh
source /usr/share/doc/fzf/examples/key-bindings.zsh
{% elif 'Fedora' in ansible_distribution -%}
source /usr/share/fzf/shell/key-bindings.zsh
{% endif -%}
{% for file in zsh_source_files -%}
source {{ file['path'] }}
{% endfor -%}
{% if 'remmac06432' in ansible_hostname -%}
source ~/.infractl/orm
source ~/.infractl/secrets
{% endif -%}


{% if 'remmac06432' in ansible_hostname %}
complete -o nospace -C /usr/local/bin/terraform terraform
{% endif %}
complete -F __start_kubectl k


eval "$(starship init zsh)"
