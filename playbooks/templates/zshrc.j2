PATH="$HOME/.local/bin"
PATH="$PATH:$HOME/.krew/bin"
{% if 'Darwin' in ansible_system %}
PATH="$PATH:/usr/local/opt/coreutils/libexec/gnubin"
PATH="$PATH:/usr/local/opt/gnu-tar/libexec/gnubin"
PATH="$PATH:/usr/local/opt/ed/libexec/gnubin"
PATH="$PATH:/usr/local/opt/grep/libexec/gnubin"
PATH="$PATH:/usr/local/opt/gnu-sed/libexec/gnubin"
PATH="$PATH:/usr/local/opt/gawk/libexec/gnubin"
PATH="$PATH:/usr/local/opt/findutils/libexec/gnubin"
PATH="$PATH:{{ python_user_path }}"
PATH="$PATH:/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin"
PATH="$PATH:/opt/X11/bin"
{% endif %}
PATH="$PATH:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"


MANPATH="$HOME/.local/share/man"
{% if 'Darwin' in ansible_system %}
MANPATH="$MANPATH:/usr/local/opt/coreutils/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/gnu-tar/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/ed/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/grep/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/gnu-sed/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/gawk/libexec/gnuman"
MANPATH="$MANPATH:/usr/local/opt/findutils/libexec/gnuman"
{% endif %}
MANPATH="$MANPATH:/usr/local/share/man:/usr/share/man"


export PATH
export MANPATH
export VISUAL=vim
export EDITOR=vim
export DOCKER_BUILDKIT=1                # Build containers in parallel
export FZF_DEFAULT_OPTS="--reverse --height=50% --color=light --multi"
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWCOLORHINTS=true
export GIT_PS1_SHOWUPSTREAM="verbose name auto"
export LESS_TERMCAP_mb=$'\E[01;32m'     # Add colors to manpages
export LESS_TERMCAP_md=$'\E[01;32m'     # "
export LESS_TERMCAP_me=$'\E[0m'         # "
export LESS_TERMCAP_se=$'\E[0m'         # "
export LESS_TERMCAP_so=$'\E[01;47;34m'  # "
export LESS_TERMCAP_ue=$'\E[0m'         # "
export LESS_TERMCAP_us=$'\E[01;36m'     # "
export LESS=-r                          # "
export PRE_COMMIT_COLOR=never           # pre-commit colors incompatible with solarized-light
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=136"
{% if 'Darwin' in ansible_system %}
export SHELL_SESSIONS_DISABLE=1         # See /etc/zshrc_Apple_Terminal
export CLICOLOR=1
export HOMEBREW_PREFIX=/usr/local
export HOMEBREW_CELLAR=/usr/local/Cellar
export HOMEBREW_REPOSITORY=/usr/local/Homebrew
export INFOPATH=/usr/local/share/info:"${INFOPATH:-}"
export CLOUDSDK_PYTHON=/usr/bin/python3
{% endif %}


{% if 'Darwin' in ansible_system %}
eval "$(keychain --eval --ignore-missing --quiet --inherit any {{ ssh_keys | join(' ') }})"
{% elif 'Linux' in ansible_system %}
eval "$(keychain --eval --ignore-missing --quiet {{ ssh_keys | join(' ') }})"
{% endif %}
eval "$(dircolors $HOME/.dir_colors)"


alias _inline_fzf='fzf --multi --ansi -i -1 --height=50% --reverse -0 --header-lines=1 --inline-info --border'
alias _inline_fzf_nh='fzf --multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border'
alias archivebox='docker run -v $PWD:/data -it archivebox/archivebox'
alias condense='grep -Erv "(^#|^$)"'
alias cp='cp -i'
alias dc='docker-compose'
alias df='df -h'
alias dmux='tmux new -s "$(diceware 2)"'
alias e='extract'
alias glances='glances --theme-white'
alias glow='glow -s light'
alias grep='grep -I'
alias gcommon='cd $(dirname $(git rev-parse --git-common-dir))'
alias gtop='cd "$(git rev-parse --show-toplevel)"'
alias gbd='git-branch-delete'
alias gwt='git-worktree'
alias hadolint='docker run --rm -i ghcr.io/hadolint/hadolint <'
alias isodate='date --iso-8601=seconds'
alias krew='kubectl krew'
alias lb='ls --color --classify --human-readable'  # ls base alias
alias l1='lb -1'
alias la='lb -l --all'
alias lg='lb -g --no-group'
alias ll='lb -l'
alias lS='lb -1S --almost-all --group-directories-first --size'
alias lt='lb -lt --reverse --almost-all'
alias lu='lb -ltu --reverse --almost-all'
alias lolo='echo {{ docker_images | join(' ') }} | xargs -P10 -n1 docker pull'
alias lsmnt='mount | column -t'
alias mp='multipass'
alias pipi='python3 -m pip install --user'
alias pipr='python3 -m pip uninstall'
alias pipu='python3 -m pip list --outdated --format=json 2>/dev/null | jq -r ".[].name" | xargs python3 -m pip install --user --upgrade'
alias pubip='dig myip.opendns.com @resolver1.opendns.com'
alias readme='macdown README*'
alias scp='rsync'
alias show='whence -f'
alias sync='rsync -a --info=progress2'
alias tf='terraform'
alias timestamp='date +%F_%T | tr -d ":-" | tr "_" "-"'
alias vs='code .'
{% if 'Darwin' in ansible_system %}
alias pbb='macdown ~/Development/Reference/pure-bash-bible/README.md'
alias osupdate='sudo softwareupdate -ia'
{% elif 'Linux' in ansible_system %}
alias free='free -g'
alias iowatch='watch -n 1 iostat -xy --human 1 1'
alias ipa='ip -c a'
alias lsblk='lsblk -o "NAME,FSTYPE,SIZE,UUID,MOUNTPOINT"'
alias pbb='ghostwriter ~/Development/Reference/pure-bash-bible/README.md'
alias proc='ps -e --forest -o pid,ppid,user,time,cmd'
alias lsports='lsof -i -P -n'
{% endif %}
{% if ('Ubuntu' in ansible_distribution) or ('Pop!_OS' in ansible_distribution) %}
alias osupdate='sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y'
alias bat='batcat'
{% elif 'Fedora' in ansible_distribution %}
alias osupdate='sudo dnf makecache && sudo dnf upgrade -y'
{% endif %}
{% if 'remmac06432' in ansible_hostname %}
alias infrasetup='./install.sh env && ./install.sh && source ./ve/bin/activate && ./install.sh deploy-local'
{% endif %}


function blackdiff() {
  black --line-length 100 --diff "$@"
}

function cheat() {
  curl -s "cheat.sh/$1?style=vs"
}

function crackpdf() {
  qpdf --password="$1" --decrypt "$2" "${2%.*}"-decrypted.pdf
}

function dclint() {
  docker-compose -f "$1" config --quiet
}

function dtags() {
  wget -q https://registry.hub.docker.com/v1/repositories/"$1"/tags -O - | jq -r '.[].name'
}

function diceware() {
  keepassxc-cli diceware --words "${1:-5}" | tr " " "-"
}

function decrypt() {
  openssl enc -d -aes-256-cbc -in "$1" -out "$1.decrypted"
}

function encrypt() {
  openssl enc -aes-256-cbc -salt -in "$1" -out "$1.encrypted"
}

function git-branch-delete() {
  git branch |
    grep --invert-match '\*' |
    cut -c 3- |
    _inline_fzf_nh --preview="git log {} --" |
    xargs --no-run-if-empty git branch --delete --force
}

function git-worktree() {
  case "$1" in
    add|create) git worktree add ./.worktree/"$2" ;;
    remove)     git worktree remove "$2" ;;
    delete)     git worktree remove "$(git-worktree list | _inline_fzf_nh | awk '{print $1}')" ;;
    list)       git worktree list | awk '(NR>1)' | sed -r "s|$PWD/.worktree/||" ;;
    *)          echo "git-worktree [add|remove <branch>] | list | delete" ;;
  esac
}

function httptrace() {
  curl -s -L -D - "$1" -o /dev/null -w "%{url_effective}\n"
}

function import-ssh-config() {
  pushd ~/Development/Projects/ansible &> /dev/null
  command cp -f ~/.ssh/config roles/dotfiles/files/ssh/.ssh/
  ansible-vault encrypt roles/dotfiles/files/ssh/.ssh/config
  popd &> /dev/null
}

function mkpasswd() {
  keepassxc-cli generate -L "${1:-16}" -lUn --exclude-similar
}

function mux() {
  [[ -n "$TMUX" ]] && return 1
  if tmux has-session -t main &> /dev/null; then tmux attach-session -t main
  else tmux new -s main
  fi
}

function pyenv() {
  local pyname pyver=3.8 pyfunc

  while getopts ':acdhn:v:' flag; do
    case "$flag" in
      a) pyfunc=activate ;;
      c) pyfunc=create ;;
      d) deactivate ; return $? ;;
      h) echo "Usage: pyenv [-a(ctivate) | -c(reate)] [-n <name> -v <version>] | -d(eactivate)" ; return 0 ;;
      n) pyname=$OPTARG ;;
      v) pyver=$OPTARG ;;
      *) echo "Invalid argument." >&2 ; return 1 ;;
    esac
  done

  case "$pyfunc" in
    create)   [[ -z $pyname ]] && pyname=ve
              virtualenv -p "$pyver" "$pyname"
              ;;
    activate) [[ -z $pyname ]] && pyname=$(dirname "$(find . -maxdepth 2 -type f -name pyvenv.cfg)")
              source "$pyname"/bin/activate
              ;;
    *)        [[ -z $pyname ]] && pyname=ve
              virtualenv -p "$pyver" "$pyname"
              source "${pyname-ve}"/bin/activate
              ;;
  esac
}

function pylinter() {
  blackdiff "$@"
  pylint "$@"
}

function sshf() {
  ssh $(grep -Er '^Host' ~/.ssh/config | cut -d' ' -f2 | grep -v '*' | sort -u | _inline_fzf_nh)
}

function tardir() {
  tar -czf "${1%/}".tar.gz "$1"
}

function ytdl-video() {
  youtube-dl \
  --format "bestvideo+bestaudio[ext=m4a]/bestvideo+bestaudio/best" \
  --merge-output-format mp4 \
  -o "%(title)s.%(ext)s" "$1"
}

{% if 'Darwin' in ansible_system %}
function steep() {
  if ! xcode-select --version &> /dev/null; then xcode-select --install; fi
  for step in update upgrade cleanup doctor; do toilet --font future --width 100 "$step"; brew "$step"; done
}

function uptime-p() {
  uptime | sed -rn "s/.*(up\s[0-9]+)\sdays\s([0-9]+):([0-9]+).*/\1d \2h \3m/p"
}

function ytdl-music() {
    youtube-dl --format bestaudio --extract-audio --audio-format mp3 \
      --postprocessor-args "-strict experimental" "$1"
}
{% elif 'Linux' in ansible_system %}
function ytdl-music() {
  youtube-dl --format bestaudio --extract-audio --audio-format mp3 "$1"
}

function findproc() {
  local pid
  if [[ "$1" =~ ^[0-9]+$ ]]; then pid="$(ps -o sid= -p "$1")"; else pid="$(pgrep "$1")"; fi
  ps --forest -o pid,ppid,user,time,cmd -g "$pid"
}

function gedit() {
  nohup /usr/bin/gedit "$@" &> /dev/null &
}
{% endif %}

function precmd() {
  local rc=$?
  local bold="%B" nobold="%b" nocolor="%f"
  local blue="%F{33}" \
        cyan="%F{37}" \
        violet="%F{61}" \
        green="%F{64}" \
        magenta="%F{125}" \
        red="%F{160}" \
        orange="%F{166}" \
        base03="%F{234}"
  local eol=$'\n'

  _CWD="" _PYENV="" _GIT="" _PROMPT=""

  # -- cwd segment -- #
  if [[ -n $TMUX ]]; then
    _CWD="${blue}→ %1~ ${nocolor}"
  else
    _CWD="${blue}→ %(3~|%-1~/.../%1~|%~) ${nocolor}"
  fi

  # -- virtualenv segment -- #
  if [[ -n "$VIRTUAL_ENV" ]]; then
    _PYENV="${cyan}೭ $(python --version | grep -Eo '([0-9]+.?)+') ($(basename "$VIRTUAL_ENV")) ${nocolor}"
  fi

  # -- git segment -- #
  if _res="$(git rev-parse --git-common-dir 2> /dev/null)"; then
    _GIT="${green}⇄ $(basename $(readlink -f $(dirname $_res)))/${nocolor}"
  fi

  # -- prompt segment -- #
  case "$rc" in
    0) _PROMPT="${green}%#${nocolor} "   ;;
    1) _PROMPT="${red}%#${nocolor} "     ;;
    *) _PROMPT="${magenta}%#${nocolor} " ;;
  esac

  __git_ps1 "${eol}${bold}${_CWD}${_GIT}" "${_PYENV}${eol}${_PROMPT}${nobold}" "%s "
}


setopt appendhistory           # Immediately append history instead of overwriting
setopt autocd                  # If only directory path is entered, cd there.
setopt correct                 # Auto correct mistakes
setopt extended_history        # Save each command’s beginning timestamp and the duration
setopt extendedglob            # Extended globbing. Allows using regular expressions with *
setopt hist_verify             # Confirm commands from history expansion
setopt histignorealldups       # If a new command is a duplicate, remove the older one
setopt inc_append_history_time # Time taken by the command is recorded correctly in the history file
setopt nobeep                  # No beep
setopt nocaseglob              # Case insensitive globbing
setopt numericglobsort         # Sort filenames numerically when it makes sense
setopt rcexpandparam           # Array expension with parameters

HISTFILE=~/.zsh_history
HISTSIZE=2000
SAVEHIST=5000

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'         # Case insensitive tab completion
zstyle ':completion:*' completer _expand_alias _complete _ignored # Expand aliases with tab
zstyle ':completion:*' menu select                 # Use menu selection for completion
zstyle ':completion:*' list-suffixes               # Show ambiguous components for partial pathnames
zstyle ':completion:*' rehash true                 # Auto find new executables in path
zstyle ':completion:*' accept-exact '*(N)'         # Speed up completions
zstyle ':completion:*' use-cache on                # "
zstyle ':completion:*' cache-path ~/.zsh/cache     # "
WORDCHARS=${WORDCHARS//\/[&.;]}                    # Don't consider these part of the word

bindkey -e                                         # Emacs style shortcuts
bindkey '^[[7~' beginning-of-line                  # Home key
bindkey '^[[H' beginning-of-line                   # Home key
if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line   # [Home] - Go to beginning of line
fi
bindkey '^[[8~' end-of-line                        # End key
bindkey '^[[F' end-of-line                         # End key
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}" end-of-line          # [End] - Go to end of line
fi
bindkey '^[[3~' delete-char                        # Delete key
bindkey '^[[C'  forward-char                       # Right key
bindkey '^[[D'  backward-char                      # Left key
bindkey '^[[5~' history-beginning-search-backward  # Page up key
bindkey '^[[6~' history-beginning-search-forward   # Page down key

autoload -Uz compinit zmv zcalc && compinit


{% if 'MacOSX' in ansible_distribution %}
source /usr/local/etc/bash_completion.d/git-prompt.sh
source /usr/local/opt/fzf/shell/completion.zsh
source /usr/local/opt/fzf/shell/key-bindings.zsh
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc
{% elif ('Ubuntu' in ansible_distribution) or ('Pop!_OS' in ansible_distribution) %}
source /etc/bash_completion.d/git-prompt
source /usr/share/doc/fzf/examples/completion.zsh
source /usr/share/doc/fzf/examples/key-bindings.zsh
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
{% elif 'Fedora' in ansible_distribution %}
source /etc/bash_completion.d/git-prompt
source /usr/share/fzf/shell/key-bindings.zsh
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
{% endif %}
source {{ shell_conf }}/fubectl
source {{ shell_conf }}/kubectl
source {{ shell_conf }}/gcsh
source {{ shell_conf }}/pipenv
{% if 'remmac06432' in ansible_hostname %}
source {{ shell_conf }}/orm
source ~/.infractl/secrets
{% endif %}


complete -F __start_kubectl k
