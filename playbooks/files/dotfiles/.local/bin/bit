#!/usr/bin/env bash

#
# Branches a Git repo as a worktree within tmux.
# Author: Brad Frank
# Date: May 2021
# Tested: GNU bash, version 5.1.12(1)-release (x86_64-apple-darwin21.1.0)
# Requires: tmux, git, fzf, gh
#

_fzf() {
  fzf --ansi -i --height=50% --reverse -0 --inline-info --border "$@"
}

find_dir_fzf() {
  find "$1" -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | _fzf --multi -1
}

get_repo_path() {
  gitdir="$(git rev-parse --show-toplevel 2> /dev/null)" && in_git_repo=$true

  if [[ -z $repo_name && ( $interactive -eq $true || $in_git_repo -eq $false ) ]]; then
    repo_name="$(find_dir_fzf "$projects_dir")"
  elif [[ -z $repo_name && $in_git_repo -eq $true ]]; then
    repo_name="$(basename "$(dirname "$gitdir")")"
  fi

  repo_path="$projects_dir/$repo_name"
}

create_worktree_new() {
  if [[ -z $branch_from && ( $interactive -eq $true || $in_git_repo -eq $false ) ]]; then
    branch_from="$(find_dir_fzf "$repo_path")"
  elif [[ -z $branch_from && $in_git_repo -eq $true ]]; then
    branch_from="$(basename "$gitdir")"
  fi

  branch_path="$repo_path/$branch_from"
  [[ -z $new_branch ]] && new_branch="${branch_from}_$(date +%y%b%d-%H%M)"
  repo_branch="$repo_path/$new_branch"
  cd "$branch_path" || exit 1
  git worktree add "$repo_branch"
}

create_worktree_from_origin() {
  git fetch origin --prune
  new_branch="$(
    git for-each-ref --format='%(refname:short)' refs/remotes \
    | cut --delimiter / --fields 2 \
    | grep --extended-regexp --invert-match '^(HEAD|main|master)$' \
    | _fzf --no-multi --preview='git log --pretty=reference origin/{}'
  )"
  repo_branch="$repo_path/$new_branch"
  git worktree add "$repo_branch"
  cd "$repo_branch" || exit 1
  git branch --set-upstream-to origin/"$new_branch" "$new_branch"
  git pull
  git reset --hard origin/"$new_branch"
}

clone_repo() {
  local tmp_repo
  repo_path="$projects_dir/$repo_name"
  mkdir --parents "$repo_path" || exit 1
  tmp_repo="$(mktemp --directory)"
  git clone "$repo_url" "$tmp_repo/$repo_name"
  cd "$tmp_repo/$repo_name" || exit 1
  repo_branch="$repo_path/$(git branch --show-current)"
  mv --no-target-directory "$tmp_repo/$repo_name" "$repo_branch"
}

open_in_tmux() {
  case $open_in in
    window) tmux new-window -n "$repo_name" -c "$repo_branch" ;;
    pane)   tmux split-window -h -c "$repo_branch" ;;
  esac
}

usage() {
  usage_create; echo
  usage_pull; echo
  usage_delete; echo
  usage_clone
}

usage_create() {
  echo "bit create [-h] | [-r <repo> -f <name>|-i] [-n <name>] [-p|-w]"
  echo "-f <name>   Branch to branch from"
  echo "-i          Force interactive selection of repo and/or branch"
  echo "-n          Name of the new branch"
  echo "-r <repo>   Repository to branch from"
  echo "-p          Opens the branch in a tmux pane in the same window (default)"
  echo "-w          Opens the branch in a new tmux window"
}

usage_pull() {
  echo "bit pull [-h] | [-r <repo>|-i] [-p|-w]"
  echo "-i          Force interactive selection of repo"
  echo "-r <repo>   Repository to branch from"
  echo "-p          Opens the branch in a tmux pane in the same window (default)"
  echo "-w          Opens the branch in a new tmux window"
}

usage_delete() {
  echo "bit delete [-h]"
}

usage_clone() {
  echo "bit clone [-h] | [-o <org>|-u <url>]"
  echo "-o          Specify org or user"
  echo "-u          URL of Git repo (https or ssh)"
}

main() {
  local OPTIND subcommand
  local projects_dir open_in interactive in_git_repo gitdir \
        worktree gh_repo org_name user repo_path
  declare -r true=0 false=1

  projects_dir="$HOME/Development/Projects"
  open_in="pane"
  interactive=$false
  in_git_repo=$false

  while getopts "h" opt; do
    case "$opt" in
      h) usage; exit 0 ;;
      *) echo "Invalid option: $OPTARG" >&2; usage; exit 1 ;;
    esac
  done

  shift $((OPTIND-1))
  subcommand=$1; shift

  case "$subcommand" in

    create)
      while getopts ':f:hinpr:w' flag; do
        case "$flag" in
          f) branch_from="$OPTARG" ;;
          h) usage_create ;;
          i) interactive=$true ;;
          n) new_branch="$OPTARG" ;;
          p) open_in="pane" ;;
          r) repo_name="$OPTARG" ;;
          w) open_in="window" ;;
          :) echo "Must supply an argument to -$OPTARG." >&2; usage_create; exit 1 ;;
         \?) echo "Invalid option: $OPTARG" >&2; usage_create; exit 1 ;;
        esac
      done
      get_repo_path
      create_worktree_new
      open_in_tmux
      ;;

    pull)
      while getopts ':hipr:w' flag; do
        case "$flag" in
          h) usage_pull ;;
          i) interactive=$true ;;
          p) open_in="pane" ;;
          r) repo_name="$OPTARG" ;;
          w) open_in="window" ;;
          :) echo "Must supply an argument to -$OPTARG." >&2; usage_pull; exit 1 ;;
         \?) echo "Invalid option: $OPTARG" >&2; usage_pull; exit 1 ;;
        esac
      done
      get_repo_path
      create_worktree_from_origin
      open_in_tmux
      ;;

    delete)
      while getopts 'h' flag; do
        case "$flag" in
          h) usage_delete ;;
          *) echo "Invalid option" >&2; usage_delete; exit 1 ;;
        esac
      done
      gitdir="$(git rev-parse --show-toplevel 2> /dev/null)" || return 1
      while read -r worktree; do
        if [[ -n "$worktree" ]]; then
          git worktree remove "$worktree"
          git branch --delete --force "$(basename "$worktree")"
        fi
      done <<< "$(
        git worktree list --porcelain \
          | grep -E '^worktree' \
          | tail -n+2 \
          | awk '{print $2}' \
          | _fzf --multi --preview='git log {} --' --delimiter / --with-nth -1
      )"
      ;;

    clone)
      while getopts ':ho:u:' flag; do
        case "$flag" in
          h) usage_clone ;;
          o) org_name="$OPTARG" ;;
          u) repo_url="$OPTARG" ;;
          :) echo "Must supply an argument to -$OPTARG." >&2; usage_clone; exit 1 ;;
         \?) echo "Invalid option: $OPTARG" >&2; usage_clone; exit 1 ;;
        esac
      done

      if [[ -n "$repo_url" ]]; then
        repo_name="$(basename "$repo_url")"
        repo_name="${repo_name%%.*}"
      else
        user="$(gh api user --jq '.login')"
        #shellcheck disable=SC2016
        gh_repo="$(
          gh api graphql --paginate --field owner="${org_name:-$user}" --raw-field query='
            query ($owner: String!, $endCursor: String) {
              repositoryOwner(login: $owner) {
                repositories(first: 30, after: $endCursor) {
                  pageInfo { hasNextPage, endCursor }
                  nodes { nameWithOwner }
                }
              }
            }' --jq '.data.repositoryOwner.repositories.nodes[].nameWithOwner' \
            | fzf --no-multi --preview='git log --pretty=reference origin/{}'
        )"
        [[ -z $gh_repo ]] && exit 1
        repo_url="git@github.com:${gh_repo}.git"
        repo_name="$(basename "$gh_repo")"
      fi
      clone_repo
      open_in="window"
      open_in_tmux
      ;;

  esac
}

main "$@"
