#!/usr/bin/env bash

#
# A script to iterate through all GKE clusters in all GCP projects and create kubectl configs.
# Author: Brad Frank
# Date: Nov 2020
# Tested: GNU bash, version 5.0.18(1)-release (x86_64-apple-darwin19.6.0)
#


# ----- functions ----- #

function main() {
    local project cluster

    mv ~/.kube/config{,.bak}

	gcloud projects list --format="value(projectId)" | while read -r project; do
        #
        # Outputs each cluster as "zone,name" on a single line such
        # that each line is easily parseable, and an item in an array.
        # e.g. [ "us-central1,cluster1", "us-central1-c,cluster2" ]
        #
		gcloud --project "$project" container clusters list --format="value[separator=','](zone,name)" \
		| while read -r cluster; do
			# Skip running if no cluster exists for current project.
			if [[ -z "$cluster" ]]; then continue
			else get_credentials "$cluster"
			fi
		done

    done
}

function get_credentials() {
    local cluster_region cluster_name

    #
    # Parse the cluster information passed into the function, splitting by comma.
    # e.g. "us-central1,cluster1" becomes "us-central1" and "cluster1".
    #
    cluster_region="$(cut -d, -f1 <<< "$1")"
    cluster_name="$(cut -d, -f2 <<< "$1")"
    gcloud container clusters get-credentials --region="$cluster_region" "$cluster_name"
}

function rename-contexts() {
    local context

    for context in $(kubectl config get-contexts | grep -v '\*' | awk '(NR>1) {print $1}'); do
        kubectl config rename-context "$context" "$(grep -o '[^_]*$' <<< "$context")"
    done
}


# ----- begin ----- #

main
exit $?
