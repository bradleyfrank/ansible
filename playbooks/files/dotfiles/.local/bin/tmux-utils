#!/usr/bin/env bash

#
# Collection of tmux scripts.
# Author: Brad Frank
# Date: Feb 2022
# Tested: GNU bash, version 5.1.16(1)-release (x86_64-apple-darwin20.6.0)
# Requires: tmux
#


_tmux_fzf() {
   fzf-tmux -p --ansi -i --height=50% --exit-0 --inline-info --border "$@"
}


_get_window_name() {
  local cwd base_cwd username branch_name
  cwd="$1" base_cwd="$(basename "$cwd")"

  pushd "$cwd" &> /dev/null || exit 1

  if branch_name="$(git branch --show-current 2>/dev/null)"; then
    if [[ "$base_cwd" == "$branch_name" ]]; then
      repo_name="$(basename "$(dirname "$cwd")")"
    else
      repo_name="$base_cwd"
    fi
    WINDOW_NAME="${repo_name} (${branch_name})"
  else
    username="$(id --user --name)"
    if [[ "$base_cwd" == "$username" ]]; then
      WINDOW_NAME="$username"
    else
      WINDOW_NAME="$base_cwd"
    fi
  fi

  popd &> /dev/null || exit 1
}


_get_project_dir() {
  find "${HOME}/Development/Projects" -mindepth 2 -maxdepth 2 -type d \
    | fzf-tmux -p --ansi -i --height=50% --reverse --exit-0 --inline-info --border rounded \
      --no-multi --delimiter / --with-nth -2,-1 \
      --preview="eza --color always --classify --no-user --no-permissions --long --all --git {} --"
}


rename_window() {
  [[ -z "$1" ]] && { echo "No directory provided" >&2; exit 1; }
  _get_window_name "$1"
  tmux rename-window "$WINDOW_NAME"
}


open_project() {
  local OPTIND project_dir cmd window_name session_name make_new_session; make_new_session=0
  while getopts ":d:c:s" opt; do
    case "$opt" in
      d) project_dir="$OPTARG" ;;
      c) cmd="$OPTARG" ;;
      s) make_new_session=1 ;;
      :) echo "-$OPTARG requires a value" >&2; exit 1 ;;
     \?) echo "-$OPTARG is invalid" >&2; exit 1 ;;
    esac
  done

  [[ -z "$project_dir" ]] && project_dir="$(_get_project_dir)"
  [[ -z "$project_dir" ]] && exit 1
  _get_window_name "$project_dir"

  if [[ $make_new_session -eq 1 ]]; then
    session_name="$(awk '{print $1}' <<< "$window_name")"
    if ! tmux list-sessions -F "#{session_name}" | grep -q "$session_name"; then
      tmux new-session -s "$session_name" -n "$WINDOW_NAME" -c "$project_dir" -d
    else
      tmux new-window -t "$session_name" -n "$WINDOW_NAME" -c "$project_dir" -d
    fi
  else
    session_name="$(tmux display-message -p "#S")"
    tmux new-window -t "$session_name" -n "$WINDOW_NAME" -c "$project_dir" -d
  fi

  tmux switch-client -t "${session_name}:${WINDOW_NAME}"
  [[ -n "$cmd" ]] && tmux send-keys -t "${session_name}:${WINDOW_NAME}" "$cmd" Enter
}


move_windows() {
  local OPTIND current_session session window window_to_move _index _window _key; current_session="$1"
  local -A tmux_windows

  [[ -z $current_session ]] && current_session="$(tmux display-message -p "#{session_name}")"

  while read -r session; do
    while read -r window; do
      _index="$(awk -F ':' '{print $1}' <<< "$window")"
      _window="$(awk -F ':' '{print $2}' <<< "$window")"
      _key="${session}: ${_window}"
      tmux_windows["$_key"]="${session}:${_index}"
    done < <(tmux list-windows -F "#{window_index}:#{window_name}" -t "$session")
  done < <(tmux list-sessions -F "#{session_name}" -f "#{!=:#{session_name},${current_session}}")

  [[ ${#tmux_windows} -eq 0 ]] && return 1

  while read -r window_to_move; do
    tmux move-window -s "${tmux_windows["$window_to_move"]}" -d
  done < <(printf "%s\n" "${!tmux_windows[@]}" | sort | _tmux_fzf --multi)
}


dump_pane() {
  local tmpfile log_dir filename filepath
  tmpfile="$(mktemp)"
  log_dir="${HOME}/Development/Logs"
  filename="$(tmux display-message -p \
    'tmux-%Y-%b-%d-%H%M-#{session_name}-#{b:pane_current_path}.out' | tr -cd '[:print:]')"
  filepath="${log_dir}/${filename}"
  tmux capture-pane -S -
  tmux save-buffer "$tmpfile"
  cat -s "$tmpfile" > "$filepath"
  rm "$tmpfile"
  open_project -d "$log_dir" -c "vim $filepath"
}


git_branch() {
  local git_branch
  cd "$1" || exit
  if git_branch="$(git branch --show-current 2>/dev/null)"; then
    echo -e "#[fg=colour64]${git_branch}#[fg=default]"
  else
    echo -e "#[fg=colour64]n/a#[fg=default]"
  fi
}


main() {
  local subcommand; subcommand="$1"; shift
  case "$subcommand" in
    rename-window)  rename_window "$@" ;;
    open-project)   open_project "$@" ;;
    dump-pane)      dump_pane ;;
    git-branch)     git_branch "$@" ;;
    move-windows)   move_windows "$@" ;;
    *)              echo "$1 not found" >&2; exit 1 ;;
  esac
}


main "$@"
unset WINDOW_NAME
