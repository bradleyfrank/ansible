#!/usr/bin/env bash

#
# Collection of tmux scripts.
# Author: Brad Frank
# Date: Feb 2022
# Tested: GNU bash, version 5.1.16(1)-release (x86_64-apple-darwin20.6.0)
# Requires: tmux
#

_get_window_name() {
  local cwd base_cwd repo window_name username
  cwd="$1"; base_cwd="$(basename "$cwd")"

  pushd "$cwd" &> /dev/null || exit 1
  if branch_name="$(git branch --show-current 2>/dev/null)"; then
    if [[ "$base_cwd" == "$branch_name" ]]; then
      repo="$(basename "$(dirname "$cwd")")"
    else
      repo="$base_cwd"
    fi
    window_name=" ${repo} (${branch_name})"
  else
    username="$(id --user --name)"
    if [[ "$base_cwd" == "$username" ]]; then
      window_name=" ${username}"
    else
      window_name=" ${base_cwd}"
    fi
  fi
  popd &> /dev/null || exit 1

  echo "$window_name"
}

_get_project_dir() {
  find "${HOME}/Development/Projects" -mindepth 2 -maxdepth 2 -type d \
    | fzf-tmux -p --ansi -i --height=50% --reverse -0 --inline-info --border none --no-multi \
      --delimiter / --with-nth -2,-1 \
      --preview="exa --color always --classify --icons --no-user --no-permissions --long --all --git {} --"
}

rename_window() {
  [[ -z "$1" ]] && { echo "No directory provided" >&2; exit 1; }
  tmux rename-window "$(_get_window_name "$1")"
}

open_project() {
  local OPTIND project_dir cmd tmux_window
  while getopts ":d:c:" opt; do
    case "$opt" in
      d) project_dir="$OPTARG" ;;
      c) cmd="$OPTARG" ;;
      :) echo "-$OPTARG requires a value" >&2; exit 1 ;;
     \?) echo "-$OPTARG is invalid" >&2; exit 1 ;;
    esac
  done
  [[ -z "$project_dir" ]] && project_dir="$(_get_project_dir)"
  [[ -z "$project_dir" ]] && exit
  tmux_window="$(tmux new-window -n "$(_get_window_name "$project_dir")" -c "$project_dir" -P)"
  if [[ -n "$cmd" ]]; then
    tmux send-keys -t "$tmux_window" "$cmd" Enter
  fi
}

dump_pane() {
  local log_dir filename filepath
  log_dir="$HOME/Development/Logs"
  filename="$(tmux display-message -p 'tmux-+%Y-%b-%d-%H%M-#{session_name}-w#{window_index}p#{pane_index}.out')"
  filepath="${log_dir}/${filename}"
  [[ -d "$log_dir" ]] || mkdir -p "$log_dir"
  tmux capture-pane -S -
  tmux save-buffer "$filepath"
  open_project -d "$log_dir" -c "vim $filepath"
}

main() {
  local subcommand; subcommand="$1"; shift
  case "$subcommand" in
    rename-window) rename_window "$@" ;;
    open-project)  open_project "$@" ;;
    dump-pane)     dump_pane ;;
    *)             echo "$1 not found" >&2; exit 1 ;;
  esac
}

main "$@"
