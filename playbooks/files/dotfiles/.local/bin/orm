#!/usr/bin/env bash

declare -a environments=(
    "playground"
    "binderhub-dev"
    "binderhub-prod"
    "common-build"
    "platform-dev"
    "platform-prod"
)

function usage() {
    local GREEN='\033[0;32m' RESET='\033[0m'
    echo -e "usage: ${GREEN}orm${RESET} [$(echo "${environments[*]}" | tr ' ' '|')]"
}

# -- execute environment change -- #
function gcsp() { gcloud config set project "$1"; }
function kcsc() { kubectl config set current-context "$1"; }

# -- confirm argument is valid environment -- #
function verify() {
    for env in "${environments[@]}" ; do [[ "$1" == "$env" ]] && return ; done
    return 1
}

# -- find the gcp project from given environment name -- #
function get_gcp_project_id() {
    while read -r project; do
        name=$(awk '{print $2}' <<< "$project")
        grep -qi "$1" <<< "$name" && { awk '{print $1}' <<< "$project" ; return 0 ; }
    done < <(gcloud projects list)
    return 1
}

# -- find the kubectl context from given environment name -- #
function get_kubectl_context() {
    while read -r context; do
        grep -qi "$1" <<< "$context" && { echo "$context" ; return 0 ; }
    done < <(kubectl config get-contexts --no-headers --output=name)
    return 1
}

# -- calls all verificaton and setter functions -- #
function main() {
    environment="$1"
    if ! verify "$environment" ; then usage ; exit 1 ; fi
    if gcp_project="$(get_gcp_project_id "$environment")" ; then gcsp "$gcp_project" ; fi
    if k8s_context="$(get_kubectl_context "$environment")"; then kcsc "$k8s_context" ; fi
}

case "$1" in
    -h|--help|help) usage ;;
    *) main "$1" ;;
esac
