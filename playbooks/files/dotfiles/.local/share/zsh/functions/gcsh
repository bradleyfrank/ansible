# [gcpkonfig] generate kubectl credentials, usage: gcpkconfig <project1,project2,projectN>
gcpkonfig() {
    local projects project cluster _project

    [[ -z $1 ]] && return 1
    projects=("${(@s/,/)1}")

    mv ~/.kube/config ~/.kube/config."$(date --iso-8601=seconds | tr -d ':-')"

    for project in "${projects[@]}"; do
        _project="$(tr -d '\n' <<< "$project")"
        while read -r cluster; do
            [[ -z "$cluster" ]] && continue
            gcloud --project "$_project" container clusters get-credentials \
                "$(cut -d, -f2 <<< "$cluster")" --region="$(cut -d, -f1 <<< "$cluster")"
        done <<< "$(gcloud --project "$_project" container clusters list --format="value[separator=','](zone,name)")"
    done <<< "$1"
}

# [gc] alias for gcloud
alias gc='gcloud'

# [gpc] show current GCP project
alias gpc='gcloud config configurations describe default --format="value(properties.core.project)"'

# [gpf] grep for gcloud projects, usage: gpl <project1,project2,projectN>
gpf() { gcloud projects list | grep -E "^(PROJECT_ID|${1//,/|})"; }

# [gpl] list all GCP projects (table format)
alias gpl='gcloud projects list --format="table(name,projectId,lifecycleState)"'

# [gps] set the active GCP project
gps() {
    local projects
    projects="$(gcloud projects list | _inline_fzf | awk '{print $1}')"
    gcloud config set project "$projects"
}

# [_gp] interactive gcloud project select
alias -g _gp='--project $(_gp_helper)'
_gp_helper() { printf "%s" "$(gcloud projects list --format=json | jq -r '.[].projectId' | _inline_fzf_nh_single)"; }

# [gpu] gcloud project unset
alias gpu='gcloud config unset project'

# [gcreds] sets GCP project credentials via environment variables
gcreds() {
    local sacct
    sacct="$(env | grep 'APPLICATION_CREDENTIALS' | _inline_fzf_nh | cut -f1 -d'=' | awk '{print $1}')"
    [[ -z "${(P)sacct}" ]] && { echo "Missing credential json file." ; return 1 ; }
    echo "Set GOOGLE_APPLICATION_CREDENTIALS to ${(P)sacct}"
    export GOOGLE_APPLICATION_CREDENTIALS="${(P)sacct}"
}

# [gtags] show tags for docker image in GCR, usage: gtags <project> <image>
gtags() { gcloud container images list-tags gcr.io/"$1"/"$2"; }

# [ghelp] show this help message
ghelp() {
    echo "helper aliases and functions for gcloud SDK"
    echo
    grep -E '^# \[.+\]' "${(%):-%x}"
}
