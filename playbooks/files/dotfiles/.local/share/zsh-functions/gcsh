#
# Functions for making gcloud easier to use.
# Author: Brad Frank
# Date: Feb 2022
# Tested: zsh 5.8 (x86_64-apple-darwin19.6.0)
# Requires: fzf
#

_fzf_g() { fzf --select-1 --exit-0 --ansi -i --height=50% --reverse --inline-info --border "$@"; }
_fzf_g_multi() { _fzf_g --multi "$@"; }
_fzf_g_no_multi() { _fzf_g --no-multi "$@"; }

_gc_project() {
    gcloud projects list --format="value(name,projectId)" | grep "${1:-}" \
        | _fzf_g_no_multi --delimiter '\t' --with-nth 1 | awk '{print $2}'
}

_gc_container() {
    gcloud --project "$1" container images list 2> /dev/null | grep -E "${2:-}" | _fzf_g_no_multi
}

_save_and_exec() {
    local cmd; cmd="$(tr -s ' ' <<< "$1")"
    fc -R =(echo "$cmd")
    eval "$cmd"
}

# [gc] wrapper for gcloud; usage: gc [-p|--project]
gc() {
    local project _project
    zparseopts -D -E -- p:=project -project:=project
    _project="$(_gc_project "${project[2]}")"
    _save_and_exec "gcloud --project $_project $*"
}

# [gpu] gcloud project unset
alias gpu='gcloud config unset project'

# [gpl] list all GCP projects (table format)
alias gpl='gcloud projects list --format="table(name,projectId,lifecycleState)"'

# [gkube] generate kubectl credentials
gkube() {
    local projects project cluster format; format="value[separator=' '](zone,name)"

    if [[ -z $projects ]]; then
        projects="$(gcloud projects list --format="value(projectId)" | _fzf_g_multi)"
    else
        projects="$(tr ',' '\n' <<< $projects)"
    fi

    if [[ -s "$HOME"/.kube/config ]]; then
        mv "$HOME"/.kube/config "$HOME"/.kube/config."$(date --iso-8601=seconds | tr -d ':-')"
    fi

    for project in "${(@f)projects}"; do
        project="$(tr -d '\n' <<< "$project")"
        while read -r cluster; do
            [[ -z "$cluster" ]] && continue
            gcloud container clusters get-credentials "$(awk '{print $2}' <<< "$cluster")" \
                --project "$project" --region="$(awk '{print $1}' <<< "$cluster")"
        done <<< "$(gcloud container clusters list --project "$project" --format="$format" \
                        | _fzf_g_multi --delimiter ' ' --with-nth 2)"
    done
}

# [gcreds] sets GCP project credentials via environment variables; usage: gcreds [environment]
gcreds() {
    local service_account
    service_account="$(find "$HOME"/.infractl/ -type f -name '*.json' -exec basename {} .json \; \
        grep "$1" | _fzf_g_no_multi)"
    export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/.infractl/${service_account}.json"
}

# [gtags] show tags for docker image in GCR, usage: gcr-tags <project> <image>
gtags() {
    local project _project container _container
    zparseopts -E -D -- p:=project -project:=project c:=container -container:=container
    _project="$(_gc_project "${project[2]}")"
    _container="$(_gc_container "$_project" "${container[2]}")"
    gcloud container images list-tags "$_container"
}

# [gssh] allows you to ssh into a GCS instance
#   - forked from: https://github.com/caedus41/fubectl
gssh() {
    local project _project
    zparseopts -E -D -- p:=project -project:=project
    _project="$(_gc_project "${project[2]}")"
    ssh "$(gcloud --project "$_project" compute instances list \
        --format="value[separator=' '](name,networkInterfaces[0].networkIP)" \
        | _fzf_g_no_multi --delimiter " " --with-nth 1 \
        | awk '{print $2}'
    )"
}

# [ghelp] show this help message
ghelp() {
    echo "helper aliases and functions for gcloud SDK"
    echo
    grep -E '^# \[.+\]' "${(%):-%x}"
}

complete -o nospace -o default -F _python_argcomplete gc
