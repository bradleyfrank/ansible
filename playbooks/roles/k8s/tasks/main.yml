---

- name: Try installing packages via Homebrew
  tags: [k8s, kubectl, k9s, krew]
  block:
    - name: Install K8s packages
      community.general.homebrew:
        name: "{{ k8s_packages }}"
  rescue:
    - name: Fail if Homebrew isn't installed
      ansible.builtin.fail:
        msg: "Homebrew is required to install these packages."

- name: Load per-OS variables
  ansible.builtin.include_vars:
    file: "{{ ansible_facts['system'] }}.yml"
  tags: [k8s, kubectl, k9s, krew, dotfiles]

- name: Set Homebrew prefix
  ansible.builtin.set_fact:
    k8s_homebrew_prefix: "{{ k8s_default_homebrew_prefix }}"
  when: k8s_homebrew_prefix is undefined
  tags: [k8s, kubectl, k9s, krew, dotfiles]

- name: Set k9s config path
  ansible.builtin.set_fact:
    k8s_k9s_config: "{{ k8s_default_k9s_config }}"
  when: k8s_k9s_config is undefined
  tags: [k8s, k9s, dotfiles]

- name: Ensure k9s config directory exists
  ansible.builtin.file:
    path: "{{ k8s_k9s_config }}"
    state: "directory"
    mode: "0755"
  when: "'k9s' in k8s_packages"
  tags: [k8s, k9s, dotfiles]

- name: Template k9s config
  ansible.builtin.template:
    src: "{{ lookup('ansible.builtin.first_found', k8s_k9s_template_config) }}"
    dest: "{{ k8s_k9s_config }}/{{ item }}.yml"
    mode: "0644"
  loop: [config, skin]
  loop_control:
    label: "{{ item }}"
  when: "'k9s' in k8s_packages"
  tags: [k8s, k9s, dotfiles]

- name: Install krew plugins
  ansible.builtin.command:
    cmd: "{{ k8s_krew_bin }} install {{ item }}"
  loop: "{{ k8s_krew_plugins }}"
  register: cmd_krew_install
  changed_when: "'Installed plugin' in cmd_krew_install['stdout']"
  failed_when: "'does not exist in the plugin index' in cmd_krew_install['stdout']"
  when: "('krew' in k8s_packages) and (k8s_krew_plugins | length > 0)"
  tags: [k8s, krew, dotfiles]
