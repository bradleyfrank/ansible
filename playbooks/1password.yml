---

- name: "Import encrypted secrets to 1Password"
  hosts: "localhost"

  vars:
    op_template: "{{ ansible_facts['user_dir'] }}/.ansible/op.json"
    vault_file: "{{ ansible_facts['user_dir'] }}/.ansible/vault"
    homebrew_bin_path: "/opt/homebrew/bin:/home/linuxbrew/.linuxbrew/bin"
    1password_gui_cli_integration: "{{ host_has_desktop | default(true) }}"
    op_bin: "op"
    vault_secrets:
      github_token: "{{ git_github_token }}"
      rsa_ssh_key: "{{ ssh_keys['rsa'] }}"
      ed25519_ssh_key: "{{ ssh_keys['ed25519'] }}"

  vars_prompt:
    - name: "op_signin_url"
      prompt: "Enter 1Password sign-in URL"
      private: false
    - name: "op_email_address"
      prompt: "Enter email address"
      private: false
    - name: "op_secret_key"
      prompt: "Enter secret key"
      unsafe: true
      confirm: true
    - name: "op_password"
      prompt: "Enter vault password"
      unsafe: true
      confirm: true

  environment:
    PATH: "{{ homebrew_bin_path }}:{{ lookup('ansible.builtin.env', 'PATH') }}"

  tasks:
    - name: "Confirm 1Password-cli is installed"
      block:
        - name: "Check Homebrew for 1Password-cli"
          ansible.builtin.command:
            cmd: "brew info 1password-cli --json=v2"
          register: cmd_brew_info
          changed_when: false
          when: ansible_facts['system'] == "Darwin"
        - name: "Gather package facts"
          ansible.builtin.package_facts:
            manager: auto
          when: ansible_facts['system'] == "Linux"
        - name: "End if 1Password-cli not installed"
          vars:
            brew_info: "{{ cmd_brew_info['stdout'] | default('{}') | from_json }}"
            pkgs_info: "{{ ansible_facts['packages'] | default({}) }}"
          ansible.builtin.meta: "end_play"
          when: "('1Password' not in pkgs_info) and
                 (brew_info['casks'][0]['installed'] | default('null') == 'null')"

    - name: "Pause to enable 1Password CLI integration"
      ansible.builtin.pause:
        prompt: "Enable the 1Password CLI integration and hit [Enter]"
      when: 1password_gui_cli_integration

    - name: "Authenticate 1Password-cli"
      when: not 1password_gui_cli_integration
      block:
        - name: "Add account to 1Password-cli"
          vars:
            address: "--address {{ op_signin_url }}"
            email: "--email {{ op_email_address }}"
            secret_key: "--secret-key {{ op_secret_key }}"
          ansible.builtin.expect:
            command: "op account add {{ address }} {{ email }} {{ secret_key }}"
            responses:
              Enter the password: "{{ op_password }}"
        - name: "Get 1Password account info"
          ansible.builtin.command:
            cmd: "op account list --format json"
          register: cmd_op_account_list
          changed_when: false
          failed_when: cmd_op_account_list['stdout'] | from_json | length == 0
        - name: "Signin to 1Password-cli"
          ansible.builtin.expect:
            command: "op signin --raw"
            responses:
              Enter the password: "{{ op_password }}"
          register: cmd_op_signin
        - name: "Set 1Password-cli binary to use session token"
          vars:
            op_account_list: "{{ cmd_op_account_list['stdout'] | from_json }}"
            op_session_token: "{{ cmd_op_signin['stdout_lines'][1] }}"
            op_session_env: "OP_SESSION_{{ op_account_list[0]['user_uuid'] }}"
          ansible.builtin.set_fact:
            op_bin: "{{ op_session_env }}={{ op_session_token }} op"

    - name: "Check if vault file exists"
      ansible.builtin.stat:
        path: "{{ ansible_facts['user_dir'] }}/.ansible/vault"
      register: stat_vault

    - name: "Add Vault password to secrets list"
      vars:
        vault_password: "{'vault_password': '{{ lookup('ansible.builtin.file', vault_file) }}' }"
      ansible.builtin.set_fact:
        vault_secrets: "{{ vault_secrets | ansible.builtin.combine(vault_password) }}"
      when: stat_vault['stat']['exists']

    - name: "Add blank Vault password to secrets list"
      ansible.builtin.set_fact:
        vault_secrets: "{{ vault_secrets | ansible.builtin.combine({'vault_password': ''}) }}"
      when: not stat_vault['stat']['exists']

    - name: "Get 1Password Vault id"
      ansible.builtin.shell:
        cmd: "{{ op_bin }} vault get '{{ op_vault }}' --format=json"
      changed_when: false
      register: cmd_op_vault_get

    - name: "Output decrypted secrets to file"
      vars:
        vault_id: "{{ cmd_op_vault_get['stdout'] | community.general.json_query('id') }}"
      ansible.builtin.template:
        src: "op.json.j2"
        dest: "{{ op_template }}"
        mode: "0600"

    - name: "Import secrets into 1Password"
      block:
        - name: "Import secrets into 1Password"
          ansible.builtin.shell:
            # https://1password.community/discussion/comment/703328/#Comment_703328
            cmd: "{{ op_bin }} item create --template {{ op_template }} </dev/null"
          changed_when: false
      always:
        - name: "Remove 1Password template"
          ansible.builtin.file:
            path: "{{ op_template }}"
            state: "absent"
