---

- name: Get latest version of {{ name }}
  community.general.github_release:
    user: "{{ user }}"
    repo: "{{ repo }}"
    action: latest_release
    token: "{{ github['personal_token'] }}"
  register: github_release

- name: Install {{ name }}
  vars:
    latest_release: "{{ github_release['tag'] | replace('v', '') }}"
    download_path: "/tmp/{{ name }}/{{ name }}.tar.gz"
    install_path: "{{ ansible_user_dir }}/.local/bin"
    url: "https://github.com/{{ user }}/{{ repo }}/releases/download/v{{ latest_release }}/{{ filename }}"
  block:
    - name: Create temp download directory
      ansible.builtin.file:
        path: "/tmp/{{ name }}"
        state: directory
        mode: 0755
    - name: Download {{ name }} {{ latest_release }}
      ansible.builtin.get_url:
        url: "{{ url }}"
        dest: "{{ download_path }}"
        mode: 0644
    - name: Extract {{ name }} archive
      ansible.builtin.unarchive:
        src: "{{ download_path }}"
        dest: "/tmp/{{ name }}"
        list_files: true
        mode: 0644
      register: unarchive_list_files
    - name: Install {{ name }}
      ansible.builtin.copy:
        src: "/tmp/{{ name }}/{{ file }}"
        dest: "{{ install_path }}/{{ name }}"
      loop: "{{ unarchive_list_files['files'] }}"
      loop_control:
        loop_var: file
      when: name in file | basename
    - name: Make {{ name }} executable
      ansible.builtin.file:
        path: "{{ install_path }}/{{ name }}"
        mode: 0755
    - name: Record new version of {{ name }}
      vars:
        existing_packages: "{{ github_package_versions | default({}) }}"
      set_fact:
        github_package_versions: "{{ existing_packages | combine({name: latest_release}) }}"
        cacheable: true
  always:
    - name: Remove temp files
      ansible.builtin.file:
        path: "/tmp/{{ name }}"
        state: absent
  when: latest_release != github_package_versions[name] | default('0.0.0')
