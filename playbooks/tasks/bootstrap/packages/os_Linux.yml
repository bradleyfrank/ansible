---

- name: Stop packagekit
  ansible.builtin.systemd:
    name: packagekit
    state: stopped
  become: true
  tags: always

- name: Include distro-specific package tasks
  ansible.builtin.include_tasks: "tasks/bootstrap/packages/distro_{{ ansible_distribution }}.yml"
  tags: always

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto
  tags: [packages, dnf, apt]

- name: Install flatpak packages
  when: "'gui' in system_type"
  tags: [packages, flatpak]
  block:
    - name: Install flatpak remotes
      community.general.flatpak_remote:
        name: "{{ item['name'] }}"
        state: present
        flatpakrepo_url: "{{ item['url'] }}"
        method: user
      loop: "{{ flatpak_remotes }}"
      loop_control:
        label: "{{ item['name'] }}"
    - name: Install flatpak packages
      community.general.flatpak:
        name: "{{ item['name'] }}"
        state: present
        method: user
        remote: "{{ item['remote'] | default('flathub') }}"
      loop: "{{ flatpak_packages }}"

- name: Start packagekit
  ansible.builtin.systemd:
    name: packagekit
    state: started
  become: true
  tags: always

- name: Get latest Nix version
  ansible.builtin.uri:
    url: https://api.github.com/repos/NixOS/nix/tags
    headers:
      Authorization: "token {{ github['personal_token'] }}"
  register: nix_release
  tags: [packages, nix]

- name: Create temp Nix directory
  ansible.builtin.file:
    path: /tmp/nix
    state: directory
    mode: 0755
  tags: [packages, nix]

- name: Download Nix installer
  vars:
    version: "{{ nix_release['json'][0]['name'] }}"
    filename: "nix-{{ version }}-{{ ansible_machine }}-linux.tar.xz"
  ansible.builtin.get_url:
    url: "https://release.nixos.org/nix/nix-{{ version }}/{{ filename }}"
    dest: /tmp/nix.tar.xz
    mode: 0755
  tags: [packages, nix]

- name: Extract Nix installer
  ansible.builtin.unarchive:
    src: /tmp/nix.tar.xz
    dest: /tmp/nix

- name: Run Nix installer
  ansible.builtin.script:
    chdir: /tmp/nix
    cmd: install --no-daemon --yes --no-modify-profile
    creates: nix

- name: Create temp download directory
  ansible.builtin.file:
    path: "{{ github_release_temp_dir }}"
    state: directory
    mode: 0755
  notify: Remove GitHub downloads
  tags: [packages, github_release]

- name: Install Krew
  vars:
    arch: "{{ 'amd64' if ansible_machine == 'x86_64' else ansible_machine }}"
    filename: "krew-{{ ansible_system | lower }}_{{ arch }}"
  tags: [packages, github_release]
  block:
    - name: Get latest version of Krew
      community.general.github_release:
        user: kubernetes-sigs
        repo: krew
        action: latest_release
        token: "{{ github['personal_token'] }}"
      register: krew_latest_release
    - name: Download latest version of Krew
      vars:
        slug: kubernetes-sigs/krew
        version: "{{ krew_latest_release['tag'] }}"
      ansible.builtin.get_url:
        url: "https://github.com/{{ slug }}/releases/download/{{ version }}/{{ filename }}.tar.gz"
        dest: "{{ github_release_temp_dir }}/krew.tar.gz"
        mode: 0644
    - name: Extract Krew archive
      ansible.builtin.unarchive:
        src: "{{ github_release_temp_dir }}/krew.tar.gz"
        dest: "{{ github_release_temp_dir }}"
        mode: 0755
    - name: Install Krew
      ansible.builtin.command:
        cmd: "{{ github_release_temp_dir }}/{{ filename }} install krew"
        creates: "{{ ansible_user_dir }}/.krew/bin/kubectl-krew"

- name: Install jqp
  tags: [packages, github_release]
  block:
    - name: Get latest version of jqp
      community.general.github_release:
        user: noahgorstein
        repo: jqp
        action: latest_release
        token: "{{ github['personal_token'] }}"
      register: jqp_latest_release
    - name: Download latest version of Krew
      vars:
        slug: noahgorstein/jqp
        version: "{{ jqp_latest_release['tag'] }}"
        filename: "jqp_{{ version | replace('v', '', 1) }}_{{ ansible_system }}_{{ ansible_machine }}.tar.gz"
      ansible.builtin.get_url:
        url: "https://github.com/{{ slug }}/releases/download/{{ version }}/{{ filename }}"
        dest: "{{ github_release_temp_dir }}/jqp.tar.gz"
        mode: 0644
    - name: Extract jqp archive
      ansible.builtin.unarchive:
        src: "{{ github_release_temp_dir }}/jqp.tar.gz"
        dest: "{{ github_release_temp_dir }}"
        mode: 0755
    - name: Copy jqp binary
      ansible.builtin.copy:
        src: "{{ github_release_temp_dir }}/jqp"
        dest: "{{ ansible_user_dir }}/.local/bin/jqp"
        mode: 0755
        remote_src: true

- name: Install K9s
  tags: [packages, github_release]
  block:
    - name: Get latest version of K9s
      community.general.github_release:
        user: derailed
        repo: k9s
        action: latest_release
        token: "{{ github['personal_token'] }}"
      register: k9s_latest_release
    - name: Download latest version of K9s
      vars:
        slug: derailed/k9s
        version: "{{ k9s_latest_release['tag'] }}"
        arch: "{{ 'amd64' if ansible_machine == 'x86_64' else ansible_machine }}"
        filename: "k9s_{{ ansible_system }}_{{ arch }}.tar.gz"
      ansible.builtin.get_url:
        url: "https://github.com/{{ slug }}/releases/download/{{ version }}/{{ filename }}"
        dest: "{{ github_release_temp_dir }}/k9s.tar.gz"
        mode: 0644
    - name: Extract K9s archive
      ansible.builtin.unarchive:
        src: "{{ github_release_temp_dir }}/k9s.tar.gz"
        dest: "{{ github_release_temp_dir }}"
        mode: 0755
    - name: Copy K9s binary
      ansible.builtin.copy:
        src: "{{ github_release_temp_dir }}/k9s"
        dest: "{{ ansible_user_dir }}/.local/bin/k9s"
        mode: 0755
        remote_src: true
