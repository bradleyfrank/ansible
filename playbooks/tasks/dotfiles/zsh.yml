---

- name: Create site-functions directory
  ansible.builtin.file:
    path: "{{ zsh['site_functions'] }}"
    state: directory
    mode: 0755

- name: Install zsh plugins
  ansible.builtin.git:
    repo: "{{ item['repo'] }}"
    dest: "{{ ansible_user_dir }}/.local/share/{{ item['name'] }}"
    depth: '1'
    version: "{{ item['version'] | default(omit) }}"
  loop: "{{ zsh_plugins }}"
  loop_control:
    label: "{{ item['name'] }}"

- name: Generate Zsh completions
  environment:
    PATH: "{{ ansible_user_dir }}/.krew/bin:{{ path }}"
  ansible.builtin.shell: "{{ item['command'] }} > {{ zsh['site_functions'] }}/_{{ item['name'] }}"
  changed_when: false
  loop: "{{ zsh_completions }}"
  loop_control:
    label: "{{ item['name'] }}"
  tags: [kubectl, stern, k9s]

- name: Download cmarks script
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/bradleyfrank/cmarks/main/cmarks
    dest: "{{ zsh['rc.d'] }}/"
    mode: 0644

- name: Get zsh version
  environment:
    PATH: "{{ path }}"
  ansible.builtin.shell: |
    set -o pipefail
    case $(uname -s) in
      Darwin) brew info zsh --json | jq -r '.[].installed[0].version' ;;
      Linux)  rpm --query --queryformat '%{VERSION}' zsh ;;
    esac
  changed_when: false
  register: zsh_version

- name: Find Homebrew gnubin directories
  ansible.builtin.find:
    paths: "{{ homebrew_prefix }}/opt"
    patterns: gnubin
    file_type: directory
    depth: 3
    recurse: true
    follow: true
  when: "'MacOSX' in ansible_distribution"
  register: homebrew_gnubin

- name: Find Homebrew gnuman directories
  ansible.builtin.find:
    paths: "{{ homebrew_prefix }}/opt"
    patterns: gnuman
    file_type: directory
    depth: 3
    recurse: true
    follow: true
  when: "'MacOSX' in ansible_distribution"
  register: homebrew_gnuman

- name: Apply zshrc template
  vars:
    zsh_source_files: "{{ find_zsh_source_dirs['files'] | default([]) }}"
  ansible.builtin.template:
    src: zshrc.j2
    dest: "{{ ansible_user_dir }}/.zshrc"
    mode: 0644
    backup: true
  register: _backup_zshrc
  notify: Process backups
