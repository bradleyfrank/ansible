---

- name: Check if Starship is installed
  ansible.builtin.stat:
    path: "{{ starship['install_path'] }}/starship"
  register: starship_package

- name: Get latest version of Starship
  community.general.github_release:
    user: starship
    repo: starship
    action: latest_release
  register: latest_version

- name: Get installed version of Starship
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ starship['install_path'] }}"
  ansible.builtin.command: "starship --version"
  changed_when: false
  register: installed_version
  when: starship_package['stat']['exists']

- name: Print fake version for Starship
  ansible.builtin.command: "echo 0.0.0"
  changed_when: false
  register: installed_version
  when: not starship_package['stat']['exists']

- name: Run Starship installer
  vars:
    version_local: "{{ installed_version['stdout'] | regex_search('tag:(.*)', '\\1') | first }}"
    version_remote: "{{ latest_version['tag'] }}"
  block:
    - name: Download Starship tarball
      ansible.builtin.get_url:
        url: "{{ starship['tarball'] }}"
        dest: "{{ starship['download_path'] }}"
        mode: 0644
    - name: Extract Starship installer
      ansible.builtin.unarchive:
        src: "{{ starship['download_path'] }}"
        dest: "{{ starship['install_path'] }}/"
    - name: Make Starship executable
      ansible.builtin.file:
        path: "{{ starship['install_path'] }}/starship"
        mode: 0755
  always:
    - name: Remove Starship tarball
      ansible.builtin.file:
        path: "{{ starship['download_path'] }}"
        state: absent
  when: version_local != version_remote
